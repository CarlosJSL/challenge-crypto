// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DashboardCards Component should render 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <DashboardCards
    userCryptoAmount={
      Object {
        "bitcoin_value": 0,
        "brita_value": 0,
        "real_value": 10000,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": DashboardCards {
      "_reactInternalFiber": FiberNode {
        "_debugID": 1592,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 1591,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1589,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 1589,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui link cards"
                  >
                    <div
                      class="ui modal buy"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Comprar 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (R$) 
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      class="ui modal sell"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Vender 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 19,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "userCryptoAmount": Object {
                      "bitcoin_value": 0,
                      "brita_value": 0,
                      "real_value": 10000,
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="ui link cards"
                >
                  <div
                    class="ui modal buy"
                  >
                    <div
                      class="content"
                    >
                      <h2>
                         Comprar 
                         
                      </h2>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>
                    <div
                      class="actions"
                    >
                      <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    class="ui modal sell"
                  >
                    <div
                      class="content"
                    >
                      <h2>
                         Vender 
                         
                      </h2>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>
                    <div
                      class="actions"
                    >
                      <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 19,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Array [],
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Array [],
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 1593,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": Object {
            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
            "lineNumber": 109,
          },
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 1594,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": null,
            "childExpirationTime": 0,
            "effectTag": 0,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Array [],
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Array [],
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": FiberNode {
              "_debugID": 1595,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                "lineNumber": 142,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 1597,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                  "lineNumber": 143,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 1599,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                    "lineNumber": 144,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 1602,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": " Comprar ",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": " Comprar ",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 1603,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": " ",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": " ",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode":  ,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode":  Comprar ,
                    "tag": 8,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      " Comprar ",
                      undefined,
                      " ",
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      " Comprar ",
                      undefined,
                      " ",
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 1600,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                      "lineNumber": 145,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 1604,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 146,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1606,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 147,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Saldo Atual (R$) ",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Saldo Atual (R$) ",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1607,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 148,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1608,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "R$ ",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "R$ ",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": R$ ,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              "R$ ",
                              undefined,
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              "R$ ",
                              undefined,
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <h4>
                            R$ 
                          </h4>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "h4",
                          "updateQueue": null,
                        },
                        "stateNode": <h4>
                          Saldo Atual (R$) 
                        </h4>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "h4",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <h4>
                            Saldo Atual (R$) 
                          </h4>,
                          <h4>
                            R$ 
                          </h4>,
                        ],
                        "className": "column trade",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <h4>
                            Saldo Atual (R$) 
                          </h4>,
                          <h4>
                            R$ 
                          </h4>,
                        ],
                        "className": "column trade",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 1605,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 150,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1609,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 151,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1611,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "Pre√ßo ",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "Pre√ßo ",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1612,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": " (",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": " (",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1613,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 4,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": ")",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": ")",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": ),
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode":  (,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "stateNode": Pre√ßo ,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              "Pre√ßo ",
                              undefined,
                              " (",
                              undefined,
                              ")",
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              "Pre√ßo ",
                              undefined,
                              " (",
                              undefined,
                              ")",
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1610,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 152,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1614,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "R$ ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "R$ ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": R$ ,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "R$ ",
                                undefined,
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "R$ ",
                                undefined,
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <h4>
                              R$ 
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "stateNode": <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "h4",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>,
                            <h4>
                              R$ 
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>,
                            <h4>
                              R$ 
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        <div
                          className="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                      ],
                      "className": "ui two column centered grid",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        <div
                          className="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                      ],
                      "className": "ui two column centered grid",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 1601,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 155,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1615,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 156,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1616,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 157,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1618,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "Total a ser gasto: R$ ",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "Total a ser gasto: R$ ",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1619,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "0",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "0",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1620,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": " ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": " ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode":  ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": 0,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "stateNode": Total a ser gasto: R$ ,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              "Total a ser gasto: R$ ",
                              0,
                              " ",
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              "Total a ser gasto: R$ ",
                              0,
                              " ",
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1617,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 158,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1621,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1622,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": " ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": " ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode":  ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": ,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "",
                                " ",
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "",
                                " ",
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <h5>
                              
                               
                            </h5>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h5",
                            "updateQueue": null,
                          },
                          "stateNode": <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "h4",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>,
                            <h5>
                              
                               
                            </h5>,
                          ],
                          "className": "column trade",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>,
                            <h5>
                              
                               
                            </h5>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>,
                        "className": "ui two column centered grid",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>,
                        "className": "ui two column centered grid",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        class="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <h2>
                     Comprar 
                     
                  </h2>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h2",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <h2>
                       Comprar 
                       
                    </h2>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>,
                  ],
                  "className": "content",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <h2>
                       Comprar 
                       
                    </h2>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>,
                  ],
                  "className": "content",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 1598,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                    "lineNumber": 162,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 1623,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                      "lineNumber": 163,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 1624,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 164,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1626,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 165,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "cart icon",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "className": "cart icon",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1627,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Comprar",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Comprar",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Comprar,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode": <i
                          class="cart icon"
                        />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "i",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <i
                            className="cart icon"
                          />,
                          "Comprar",
                        ],
                        "className": "ui teal labeled icon disabled button",
                        "onClick": [Function],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <i
                            className="cart icon"
                          />,
                          "Comprar",
                        ],
                        "className": "ui teal labeled icon disabled button",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 1625,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 168,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "onChange": [Function],
                          "type": "number",
                          "value": 0,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "onChange": [Function],
                          "type": "number",
                          "value": 0,
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <input
                          type="number"
                          value="0"
                        />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>,
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />,
                      ],
                      "className": "ui left action input",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>,
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />,
                      ],
                      "className": "ui left action input",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="ui left action input"
                    >
                      <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        type="number"
                        value="0"
                      />
                    </div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>,
                    "className": "actions",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>,
                    "className": "actions",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="actions"
                  >
                    <div
                      class="ui left action input"
                    >
                      <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        type="number"
                        value="0"
                      />
                    </div>
                  </div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="content"
                >
                  <h2>
                     Comprar 
                     
                  </h2>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 1,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="content"
                  >
                    <h2>
                       Comprar 
                       
                    </h2>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>,
                  <div
                    className="actions"
                  >
                    <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>
                  </div>,
                ],
                "className": "ui modal buy",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="content"
                  >
                    <h2>
                       Comprar 
                       
                    </h2>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>,
                  <div
                    className="actions"
                  >
                    <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>
                  </div>,
                ],
                "className": "ui modal buy",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 1596,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                  "lineNumber": 175,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 1628,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                    "lineNumber": 176,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 1630,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                      "lineNumber": 177,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 1633,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": " Vender ",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": " Vender ",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 1634,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": " ",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": " ",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode":  ,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode":  Vender ,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        " Vender ",
                        undefined,
                        " ",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        " Vender ",
                        undefined,
                        " ",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 1631,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 178,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1635,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 179,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1637,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 180,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1639,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "Saldo Atual (",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "Saldo Atual (",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1640,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": ") ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": ") ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": ) ,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "stateNode": Saldo Atual (,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              "Saldo Atual (",
                              undefined,
                              ") ",
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              "Saldo Atual (",
                              undefined,
                              ") ",
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1638,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 181,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1641,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "(",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "(",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1642,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": ") ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": ") ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1643,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 4,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": " ",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": " ",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode":  ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode": ) ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": (,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "(",
                                undefined,
                                ") ",
                                undefined,
                                " ",
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "(",
                                undefined,
                                ") ",
                                undefined,
                                " ",
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <h4>
                              (
                              ) 
                               
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "stateNode": <h4>
                            Saldo Atual (
                            ) 
                          </h4>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "h4",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>,
                            <h4>
                              (
                              ) 
                               
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>,
                            <h4>
                              (
                              ) 
                               
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1636,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 183,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1644,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 184,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Valor (reais)",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Valor (reais)",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1645,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                "lineNumber": 185,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 1646,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "R$ ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "R$ ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": R$ ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  "R$ ",
                                  undefined,
                                ],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  "R$ ",
                                  undefined,
                                ],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <h4>
                                R$ 
                              </h4>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "h4",
                              "updateQueue": null,
                            },
                            "stateNode": <h4>
                              Valor (reais)
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h4>
                                Valor (reais)
                              </h4>,
                              <h4>
                                R$ 
                              </h4>,
                            ],
                            "className": "column trade",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h4>
                                Valor (reais)
                              </h4>,
                              <h4>
                                R$ 
                              </h4>,
                            ],
                            "className": "column trade",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>,
                          <div
                            className="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                        ],
                        "className": "ui two column centered grid",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>,
                          <div
                            className="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                        ],
                        "className": "ui two column centered grid",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 1632,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 188,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1647,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 189,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1648,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 190,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1650,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "Total a ser recebido: R$ ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "Total a ser recebido: R$ ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1651,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "0",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "0",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1652,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": " ",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": " ",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode":  ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode": 0,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": Total a ser recebido: R$ ,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "Total a ser recebido: R$ ",
                                0,
                                " ",
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "Total a ser recebido: R$ ",
                                0,
                                " ",
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1649,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                "lineNumber": 191,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 1653,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1654,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": " ",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": " ",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode":  ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode": ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  "",
                                  " ",
                                ],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  "",
                                  " ",
                                ],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <h5>
                                
                                 
                              </h5>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "h5",
                              "updateQueue": null,
                            },
                            "stateNode": <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>,
                              <h5>
                                
                                 
                              </h5>,
                            ],
                            "className": "column trade",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>,
                              <h5>
                                
                                 
                              </h5>,
                            ],
                            "className": "column trade",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>,
                          "className": "ui two column centered grid",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>,
                          "className": "ui two column centered grid",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <h2>
                       Vender 
                       
                    </h2>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h2",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <h2>
                         Vender 
                         
                      </h2>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>,
                    ],
                    "className": "content",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <h2>
                         Vender 
                         
                      </h2>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>,
                    ],
                    "className": "content",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 1629,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                      "lineNumber": 195,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 1655,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 196,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1656,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 197,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1658,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 198,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "cart icon",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "cart icon",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1659,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "Comprar",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "Comprar",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Comprar,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode": <i
                            class="cart icon"
                          />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "i",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <i
                              className="cart icon"
                            />,
                            "Comprar",
                          ],
                          "className": "ui teal labeled icon disabled button",
                          "onClick": [Function],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <i
                              className="cart icon"
                            />,
                            "Comprar",
                          ],
                          "className": "ui teal labeled icon disabled button",
                          "onClick": [Function],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1657,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 201,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "onChange": [Function],
                            "type": "number",
                            "value": 0,
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "onChange": [Function],
                            "type": "number",
                            "value": 0,
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <input
                            type="number"
                            value="0"
                          />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>,
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />,
                        ],
                        "className": "ui left action input",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>,
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />,
                        ],
                        "className": "ui left action input",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>,
                      "className": "actions",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>,
                      "className": "actions",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="actions"
                    >
                      <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>
                    </div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="content"
                  >
                    <h2>
                       Vender 
                       
                    </h2>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>
                      <div
                        class="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 2,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="content"
                    >
                      <h2>
                         Vender 
                         
                      </h2>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>,
                    <div
                      className="actions"
                    >
                      <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>
                    </div>,
                  ],
                  "className": "ui modal sell",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="content"
                    >
                      <h2>
                         Vender 
                         
                      </h2>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>,
                    <div
                      className="actions"
                    >
                      <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>
                    </div>,
                  ],
                  "className": "ui modal sell",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="ui modal sell"
                >
                  <div
                    class="content"
                  >
                    <h2>
                       Vender 
                       
                    </h2>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>
                      <div
                        class="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>
                  <div
                    class="actions"
                  >
                    <div
                      class="ui left action input"
                    >
                      <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        type="number"
                        value="0"
                      />
                    </div>
                  </div>
                </div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "stateNode": <div
                class="ui modal buy"
              >
                <div
                  class="content"
                >
                  <h2>
                     Comprar 
                     
                  </h2>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>
                <div
                  class="actions"
                >
                  <div
                    class="ui left action input"
                  >
                    <button
                      class="ui teal labeled icon disabled button"
                    >
                      <i
                        class="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      type="number"
                      value="0"
                    />
                  </div>
                </div>
              </div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "stateNode": null,
            "tag": 9,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 0,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": Array [
              Array [],
              <div
                className="ui modal buy"
              >
                <div
                  className="content"
                >
                  <h2>
                     Comprar 
                     
                  </h2>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>
                <div
                  className="actions"
                >
                  <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>
                </div>
              </div>,
              <div
                className="ui modal sell"
              >
                <div
                  className="content"
                >
                  <h2>
                     Vender 
                     
                  </h2>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (
                        ) 
                      </h4>
                      <h4>
                        (
                        ) 
                         
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Valor (reais)
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>
                <div
                  className="actions"
                >
                  <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>
                </div>
              </div>,
            ],
            "className": "ui link cards",
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": Array [
              Array [],
              <div
                className="ui modal buy"
              >
                <div
                  className="content"
                >
                  <h2>
                     Comprar 
                     
                  </h2>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>
                <div
                  className="actions"
                >
                  <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>
                </div>
              </div>,
              <div
                className="ui modal sell"
              >
                <div
                  className="content"
                >
                  <h2>
                     Vender 
                     
                  </h2>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (
                        ) 
                      </h4>
                      <h4>
                        (
                        ) 
                         
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Valor (reais)
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>
                <div
                  className="actions"
                >
                  <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>
                </div>
              </div>,
            ],
            "className": "ui link cards",
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": <div
            class="ui link cards"
          >
            <div
              class="ui modal buy"
            >
              <div
                class="content"
              >
                <h2>
                   Comprar 
                   
                </h2>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Saldo Atual (R$) 
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                  <div
                    class="column trade"
                  >
                    <h4>
                      Pre√ßo 
                       (
                      )
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Total a ser gasto: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>
              <div
                class="actions"
              >
                <div
                  class="ui left action input"
                >
                  <button
                    class="ui teal labeled icon disabled button"
                  >
                    <i
                      class="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    type="number"
                    value="0"
                  />
                </div>
              </div>
            </div>
            <div
              class="ui modal sell"
            >
              <div
                class="content"
              >
                <h2>
                   Vender 
                   
                </h2>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Saldo Atual (
                      ) 
                    </h4>
                    <h4>
                      (
                      ) 
                       
                    </h4>
                  </div>
                  <div
                    class="column trade"
                  >
                    <h4>
                      Valor (reais)
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Total a ser recebido: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>
              <div
                class="actions"
              >
                <div
                  class="ui left action input"
                >
                  <button
                    class="ui teal labeled icon disabled button"
                  >
                    <i
                      class="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    type="number"
                    value="0"
                  />
                </div>
              </div>
            </div>
          </div>,
          "tag": 7,
          "treeBaseDuration": 0,
          "type": "div",
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "effectTag": 5,
        "expirationTime": 0,
        "firstContextDependency": null,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "userCryptoAmount": Object {
            "bitcoin_value": 0,
            "brita_value": 0,
            "real_value": 10000,
          },
        },
        "memoizedState": Object {
          "cryptoFocus": Object {},
          "crypto_amount": 0,
          "cryptos": Array [],
          "enableButton": "ui teal labeled icon disabled button",
          "error": "",
          "quantity": 0,
          "real_amount": 0,
          "userCryptoAmounts": "",
        },
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "userCryptoAmount": Object {
            "bitcoin_value": 0,
            "brita_value": 0,
            "real_value": 10000,
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 1591,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1589,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 1589,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui link cards"
                  >
                    <div
                      class="ui modal buy"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Comprar 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (R$) 
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      class="ui modal sell"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Vender 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 19,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "userCryptoAmount": Object {
                      "bitcoin_value": 0,
                      "brita_value": 0,
                      "real_value": 10000,
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="ui link cards"
                >
                  <div
                    class="ui modal buy"
                  >
                    <div
                      class="content"
                    >
                      <h2>
                         Comprar 
                         
                      </h2>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>
                    <div
                      class="actions"
                    >
                      <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    class="ui modal sell"
                  >
                    <div
                      class="content"
                    >
                      <h2>
                         Vender 
                         
                      </h2>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>
                    <div
                      class="actions"
                    >
                      <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 19,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Array [],
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Array [],
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "changeAmount": [Function],
      "changeAmountSell": [Function],
      "context": Object {},
      "props": Object {
        "userCryptoAmount": Object {
          "bitcoin_value": 0,
          "brita_value": 0,
          "real_value": 10000,
        },
      },
      "refs": Object {},
      "state": Object {
        "cryptoFocus": Object {},
        "crypto_amount": 0,
        "cryptos": Array [],
        "enableButton": "ui teal labeled icon disabled button",
        "error": "",
        "quantity": 0,
        "real_amount": 0,
        "userCryptoAmounts": "",
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "userCryptoAmount": Object {
        "bitcoin_value": 0,
        "brita_value": 0,
        "real_value": 10000,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="ui link cards"
      >
        <div
          class="ui modal buy"
        >
          <div
            class="content"
          >
            <h2>
               Comprar 
               
            </h2>
            <div
              class="ui two column centered grid"
            >
              <div
                class="column trade"
              >
                <h4>
                  Saldo Atual (R$) 
                </h4>
                <h4>
                  R$ 
                </h4>
              </div>
              <div
                class="column trade"
              >
                <h4>
                  Pre√ßo 
                   (
                  )
                </h4>
                <h4>
                  R$ 
                </h4>
              </div>
            </div>
            <div
              class="ui two column centered grid"
            >
              <div
                class="column trade"
              >
                <h4>
                  Total a ser gasto: R$ 
                  0
                   
                </h4>
                <h5>
                  
                   
                </h5>
              </div>
            </div>
          </div>
          <div
            class="actions"
          >
            <div
              class="ui left action input"
            >
              <button
                class="ui teal labeled icon disabled button"
              >
                <i
                  class="cart icon"
                />
                Comprar
              </button>
              <input
                type="number"
                value="0"
              />
            </div>
          </div>
        </div>
        <div
          class="ui modal sell"
        >
          <div
            class="content"
          >
            <h2>
               Vender 
               
            </h2>
            <div
              class="ui two column centered grid"
            >
              <div
                class="column trade"
              >
                <h4>
                  Saldo Atual (
                  ) 
                </h4>
                <h4>
                  (
                  ) 
                   
                </h4>
              </div>
              <div
                class="column trade"
              >
                <h4>
                  Valor (reais)
                </h4>
                <h4>
                  R$ 
                </h4>
              </div>
            </div>
            <div
              class="ui two column centered grid"
            >
              <div
                class="column trade"
              >
                <h4>
                  Total a ser recebido: R$ 
                  0
                   
                </h4>
                <h5>
                  
                   
                </h5>
              </div>
            </div>
          </div>
          <div
            class="actions"
          >
            <div
              class="ui left action input"
            >
              <button
                class="ui teal labeled icon disabled button"
              >
                <i
                  class="cart icon"
                />
                Comprar
              </button>
              <input
                type="number"
                value="0"
              />
            </div>
          </div>
        </div>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          Array [],
          <div
            className="ui modal buy"
          >
            <div
              className="content"
            >
              <h2>
                 Comprar 
                 
              </h2>
              <div
                className="ui two column centered grid"
              >
                <div
                  className="column trade"
                >
                  <h4>
                    Saldo Atual (R$) 
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
                <div
                  className="column trade"
                >
                  <h4>
                    Pre√ßo 
                     (
                    )
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
              </div>
              <div
                className="ui two column centered grid"
              >
                <div
                  className="column trade"
                >
                  <h4>
                    Total a ser gasto: R$ 
                    0
                     
                  </h4>
                  <h5>
                    
                     
                  </h5>
                </div>
              </div>
            </div>
            <div
              className="actions"
            >
              <div
                className="ui left action input"
              >
                <button
                  className="ui teal labeled icon disabled button"
                  onClick={[Function]}
                >
                  <i
                    className="cart icon"
                  />
                  Comprar
                </button>
                <input
                  onChange={[Function]}
                  type="number"
                  value={0}
                />
              </div>
            </div>
          </div>,
          <div
            className="ui modal sell"
          >
            <div
              className="content"
            >
              <h2>
                 Vender 
                 
              </h2>
              <div
                className="ui two column centered grid"
              >
                <div
                  className="column trade"
                >
                  <h4>
                    Saldo Atual (
                    ) 
                  </h4>
                  <h4>
                    (
                    ) 
                     
                  </h4>
                </div>
                <div
                  className="column trade"
                >
                  <h4>
                    Valor (reais)
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
              </div>
              <div
                className="ui two column centered grid"
              >
                <div
                  className="column trade"
                >
                  <h4>
                    Total a ser recebido: R$ 
                    0
                     
                  </h4>
                  <h5>
                    
                     
                  </h5>
                </div>
              </div>
            </div>
            <div
              className="actions"
            >
              <div
                className="ui left action input"
              >
                <button
                  className="ui teal labeled icon disabled button"
                  onClick={[Function]}
                >
                  <i
                    className="cart icon"
                  />
                  Comprar
                </button>
                <input
                  onChange={[Function]}
                  type="number"
                  value={0}
                />
              </div>
            </div>
          </div>,
        ],
        "className": "ui link cards",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": <div
            class="ui modal buy"
          >
            <div
              class="content"
            >
              <h2>
                 Comprar 
                 
              </h2>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Saldo Atual (R$) 
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
                <div
                  class="column trade"
                >
                  <h4>
                    Pre√ßo 
                     (
                    )
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
              </div>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Total a ser gasto: R$ 
                    0
                     
                  </h4>
                  <h5>
                    
                     
                  </h5>
                </div>
              </div>
            </div>
            <div
              class="actions"
            >
              <div
                class="ui left action input"
              >
                <button
                  class="ui teal labeled icon disabled button"
                >
                  <i
                    class="cart icon"
                  />
                  Comprar
                </button>
                <input
                  type="number"
                  value="0"
                />
              </div>
            </div>
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="content"
              >
                <h2>
                   Comprar 
                   
                </h2>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Saldo Atual (R$) 
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                  <div
                    className="column trade"
                  >
                    <h4>
                      Pre√ßo 
                       (
                      )
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Total a ser gasto: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>,
              <div
                className="actions"
              >
                <div
                  className="ui left action input"
                >
                  <button
                    className="ui teal labeled icon disabled button"
                    onClick={[Function]}
                  >
                    <i
                      className="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    onChange={[Function]}
                    type="number"
                    value={0}
                  />
                </div>
              </div>,
            ],
            "className": "ui modal buy",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="content"
              >
                <h2>
                   Comprar 
                   
                </h2>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Saldo Atual (R$) 
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                  <div
                    class="column trade"
                  >
                    <h4>
                      Pre√ßo 
                       (
                      )
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Total a ser gasto: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h2>
                     Comprar 
                     
                  </h2>,
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>,
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>,
                ],
                "className": "content",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <h2>
                     Comprar 
                     
                  </h2>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      " Comprar ",
                      undefined,
                      " ",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    " Comprar ",
                    " ",
                  ],
                  "type": "h2",
                },
                Object {
                  "instance": <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>,
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>,
                    ],
                    "className": "ui two column centered grid",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <h4>
                            Saldo Atual (R$) 
                          </h4>,
                          <h4>
                            R$ 
                          </h4>,
                        ],
                        "className": "column trade",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <h4>
                            Saldo Atual (R$) 
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Saldo Atual (R$) ",
                          },
                          "ref": null,
                          "rendered": Array [
                            "Saldo Atual (R$) ",
                          ],
                          "type": "h4",
                        },
                        Object {
                          "instance": <h4>
                            R$ 
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "R$ ",
                              undefined,
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "R$ ",
                          ],
                          "type": "h4",
                        },
                      ],
                      "type": "div",
                    },
                    Object {
                      "instance": <div
                        class="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>,
                          <h4>
                            R$ 
                          </h4>,
                        ],
                        "className": "column trade",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "Pre√ßo ",
                              undefined,
                              " (",
                              undefined,
                              ")",
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "Pre√ßo ",
                            " (",
                            ")",
                          ],
                          "type": "h4",
                        },
                        Object {
                          "instance": <h4>
                            R$ 
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "R$ ",
                              undefined,
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "R$ ",
                          ],
                          "type": "h4",
                        },
                      ],
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>,
                    "className": "ui two column centered grid",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>,
                          <h5>
                            
                             
                          </h5>,
                        ],
                        "className": "column trade",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "Total a ser gasto: R$ ",
                              0,
                              " ",
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "Total a ser gasto: R$ ",
                            "0",
                            " ",
                          ],
                          "type": "h4",
                        },
                        Object {
                          "instance": <h5>
                            
                             
                          </h5>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "",
                              " ",
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "",
                            " ",
                          ],
                          "type": "h5",
                        },
                      ],
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <div
                class="actions"
              >
                <div
                  class="ui left action input"
                >
                  <button
                    class="ui teal labeled icon disabled button"
                  >
                    <i
                      class="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    type="number"
                    value="0"
                  />
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="ui left action input"
                >
                  <button
                    className="ui teal labeled icon disabled button"
                    onClick={[Function]}
                  >
                    <i
                      className="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    onChange={[Function]}
                    type="number"
                    value={0}
                  />
                </div>,
                "className": "actions",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="ui left action input"
                  >
                    <button
                      class="ui teal labeled icon disabled button"
                    >
                      <i
                        class="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      type="number"
                      value="0"
                    />
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>,
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />,
                    ],
                    "className": "ui left action input",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <i
                            className="cart icon"
                          />,
                          "Comprar",
                        ],
                        "className": "ui teal labeled icon disabled button",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <i
                            class="cart icon"
                          />,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "className": "cart icon",
                          },
                          "ref": null,
                          "rendered": Array [
                            undefined,
                          ],
                          "type": "i",
                        },
                        "Comprar",
                      ],
                      "type": "button",
                    },
                    Object {
                      "instance": <input
                        type="number"
                        value="0"
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "onChange": [Function],
                        "type": "number",
                        "value": 0,
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": <div
            class="ui modal sell"
          >
            <div
              class="content"
            >
              <h2>
                 Vender 
                 
              </h2>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Saldo Atual (
                    ) 
                  </h4>
                  <h4>
                    (
                    ) 
                     
                  </h4>
                </div>
                <div
                  class="column trade"
                >
                  <h4>
                    Valor (reais)
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
              </div>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Total a ser recebido: R$ 
                    0
                     
                  </h4>
                  <h5>
                    
                     
                  </h5>
                </div>
              </div>
            </div>
            <div
              class="actions"
            >
              <div
                class="ui left action input"
              >
                <button
                  class="ui teal labeled icon disabled button"
                >
                  <i
                    class="cart icon"
                  />
                  Comprar
                </button>
                <input
                  type="number"
                  value="0"
                />
              </div>
            </div>
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="content"
              >
                <h2>
                   Vender 
                   
                </h2>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Saldo Atual (
                      ) 
                    </h4>
                    <h4>
                      (
                      ) 
                       
                    </h4>
                  </div>
                  <div
                    className="column trade"
                  >
                    <h4>
                      Valor (reais)
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Total a ser recebido: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>,
              <div
                className="actions"
              >
                <div
                  className="ui left action input"
                >
                  <button
                    className="ui teal labeled icon disabled button"
                    onClick={[Function]}
                  >
                    <i
                      className="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    onChange={[Function]}
                    type="number"
                    value={0}
                  />
                </div>
              </div>,
            ],
            "className": "ui modal sell",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="content"
              >
                <h2>
                   Vender 
                   
                </h2>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Saldo Atual (
                      ) 
                    </h4>
                    <h4>
                      (
                      ) 
                       
                    </h4>
                  </div>
                  <div
                    class="column trade"
                  >
                    <h4>
                      Valor (reais)
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Total a ser recebido: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h2>
                     Vender 
                     
                  </h2>,
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (
                        ) 
                      </h4>
                      <h4>
                        (
                        ) 
                         
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Valor (reais)
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>,
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>,
                ],
                "className": "content",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <h2>
                     Vender 
                     
                  </h2>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      " Vender ",
                      undefined,
                      " ",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    " Vender ",
                    " ",
                  ],
                  "type": "h2",
                },
                Object {
                  "instance": <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (
                        ) 
                      </h4>
                      <h4>
                        (
                        ) 
                         
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Valor (reais)
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>,
                      <div
                        className="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>,
                    ],
                    "className": "ui two column centered grid",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>,
                          <h4>
                            (
                            ) 
                             
                          </h4>,
                        ],
                        "className": "column trade",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <h4>
                            Saldo Atual (
                            ) 
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "Saldo Atual (",
                              undefined,
                              ") ",
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "Saldo Atual (",
                            ") ",
                          ],
                          "type": "h4",
                        },
                        Object {
                          "instance": <h4>
                            (
                            ) 
                             
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "(",
                              undefined,
                              ") ",
                              undefined,
                              " ",
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "(",
                            ") ",
                            " ",
                          ],
                          "type": "h4",
                        },
                      ],
                      "type": "div",
                    },
                    Object {
                      "instance": <div
                        class="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <h4>
                            Valor (reais)
                          </h4>,
                          <h4>
                            R$ 
                          </h4>,
                        ],
                        "className": "column trade",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <h4>
                            Valor (reais)
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Valor (reais)",
                          },
                          "ref": null,
                          "rendered": Array [
                            "Valor (reais)",
                          ],
                          "type": "h4",
                        },
                        Object {
                          "instance": <h4>
                            R$ 
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "R$ ",
                              undefined,
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "R$ ",
                          ],
                          "type": "h4",
                        },
                      ],
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>,
                    "className": "ui two column centered grid",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>,
                          <h5>
                            
                             
                          </h5>,
                        ],
                        "className": "column trade",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "Total a ser recebido: R$ ",
                              0,
                              " ",
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "Total a ser recebido: R$ ",
                            "0",
                            " ",
                          ],
                          "type": "h4",
                        },
                        Object {
                          "instance": <h5>
                            
                             
                          </h5>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              "",
                              " ",
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            "",
                            " ",
                          ],
                          "type": "h5",
                        },
                      ],
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <div
                class="actions"
              >
                <div
                  class="ui left action input"
                >
                  <button
                    class="ui teal labeled icon disabled button"
                  >
                    <i
                      class="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    type="number"
                    value="0"
                  />
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="ui left action input"
                >
                  <button
                    className="ui teal labeled icon disabled button"
                    onClick={[Function]}
                  >
                    <i
                      className="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    onChange={[Function]}
                    type="number"
                    value={0}
                  />
                </div>,
                "className": "actions",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="ui left action input"
                  >
                    <button
                      class="ui teal labeled icon disabled button"
                    >
                      <i
                        class="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      type="number"
                      value="0"
                    />
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>,
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />,
                    ],
                    "className": "ui left action input",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <i
                            className="cart icon"
                          />,
                          "Comprar",
                        ],
                        "className": "ui teal labeled icon disabled button",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <i
                            class="cart icon"
                          />,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "className": "cart icon",
                          },
                          "ref": null,
                          "rendered": Array [
                            undefined,
                          ],
                          "type": "i",
                        },
                        "Comprar",
                      ],
                      "type": "button",
                    },
                    Object {
                      "instance": <input
                        type="number"
                        value="0"
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "onChange": [Function],
                        "type": "number",
                        "value": 0,
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": DashboardCards {
        "_reactInternalFiber": FiberNode {
          "_debugID": 1592,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 1591,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1589,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 1589,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="ui link cards"
                    >
                      <div
                        class="ui modal buy"
                      >
                        <div
                          class="content"
                        >
                          <h2>
                             Comprar 
                             
                          </h2>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Saldo Atual (R$) 
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>
                            <div
                              class="column trade"
                            >
                              <h4>
                                Pre√ßo 
                                 (
                                )
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>
                          </div>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Total a ser gasto: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>
                          </div>
                        </div>
                        <div
                          class="actions"
                        >
                          <div
                            class="ui left action input"
                          >
                            <button
                              class="ui teal labeled icon disabled button"
                            >
                              <i
                                class="cart icon"
                              />
                              Comprar
                            </button>
                            <input
                              type="number"
                              value="0"
                            />
                          </div>
                        </div>
                      </div>
                      <div
                        class="ui modal sell"
                      >
                        <div
                          class="content"
                        >
                          <h2>
                             Vender 
                             
                          </h2>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Saldo Atual (
                                ) 
                              </h4>
                              <h4>
                                (
                                ) 
                                 
                              </h4>
                            </div>
                            <div
                              class="column trade"
                            >
                              <h4>
                                Valor (reais)
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>
                          </div>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>
                          </div>
                        </div>
                        <div
                          class="actions"
                        >
                          <div
                            class="ui left action input"
                          >
                            <button
                              class="ui teal labeled icon disabled button"
                            >
                              <i
                                class="cart icon"
                              />
                              Comprar
                            </button>
                            <input
                              type="number"
                              value="0"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 19,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Array [],
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Array [],
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui link cards"
                  >
                    <div
                      class="ui modal buy"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Comprar 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (R$) 
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      class="ui modal sell"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Vender 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 19,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "userCryptoAmount": Object {
                          "bitcoin_value": 0,
                          "brita_value": 0,
                          "real_value": 10000,
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 1593,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
              "lineNumber": 109,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 1594,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Array [],
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Array [],
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 1595,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                  "lineNumber": 142,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 1597,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                    "lineNumber": 143,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 1599,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                      "lineNumber": 144,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 1602,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": " Comprar ",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": " Comprar ",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 1603,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": " ",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": " ",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode":  ,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode":  Comprar ,
                      "tag": 8,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        " Comprar ",
                        undefined,
                        " ",
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        " Comprar ",
                        undefined,
                        " ",
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 1600,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 145,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1604,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 146,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1606,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 147,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Saldo Atual (R$) ",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Saldo Atual (R$) ",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1607,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 148,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1608,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "R$ ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "R$ ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": R$ ,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "R$ ",
                                undefined,
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "R$ ",
                                undefined,
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <h4>
                              R$ 
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "stateNode": <h4>
                            Saldo Atual (R$) 
                          </h4>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "h4",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h4>
                              Saldo Atual (R$) 
                            </h4>,
                            <h4>
                              R$ 
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h4>
                              Saldo Atual (R$) 
                            </h4>,
                            <h4>
                              R$ 
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1605,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 150,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1609,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 151,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1611,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "Pre√ßo ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "Pre√ßo ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1612,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": " (",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": " (",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1613,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 4,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": ")",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": ")",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": ),
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode":  (,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": Pre√ßo ,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "Pre√ßo ",
                                undefined,
                                " (",
                                undefined,
                                ")",
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "Pre√ßo ",
                                undefined,
                                " (",
                                undefined,
                                ")",
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1610,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                "lineNumber": 152,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 1614,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "R$ ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "R$ ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": R$ ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  "R$ ",
                                  undefined,
                                ],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  "R$ ",
                                  undefined,
                                ],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <h4>
                                R$ 
                              </h4>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "h4",
                              "updateQueue": null,
                            },
                            "stateNode": <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h4>
                                Pre√ßo 
                                 (
                                )
                              </h4>,
                              <h4>
                                R$ 
                              </h4>,
                            ],
                            "className": "column trade",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h4>
                                Pre√ßo 
                                 (
                                )
                              </h4>,
                              <h4>
                                R$ 
                              </h4>,
                            ],
                            "className": "column trade",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="column trade"
                          >
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (R$) 
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                          <div
                            className="column trade"
                          >
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                        ],
                        "className": "ui two column centered grid",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (R$) 
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                          <div
                            className="column trade"
                          >
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>,
                        ],
                        "className": "ui two column centered grid",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 1601,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 155,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1615,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 156,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1616,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 157,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1618,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "Total a ser gasto: R$ ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "Total a ser gasto: R$ ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1619,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "0",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "0",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1620,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": " ",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": " ",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode":  ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode": 0,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": Total a ser gasto: R$ ,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "Total a ser gasto: R$ ",
                                0,
                                " ",
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "Total a ser gasto: R$ ",
                                0,
                                " ",
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1617,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                "lineNumber": 158,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 1621,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1622,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": " ",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": " ",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode":  ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode": ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  "",
                                  " ",
                                ],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  "",
                                  " ",
                                ],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <h5>
                                
                                 
                              </h5>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "h5",
                              "updateQueue": null,
                            },
                            "stateNode": <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h4>
                                Total a ser gasto: R$ 
                                0
                                 
                              </h4>,
                              <h5>
                                
                                 
                              </h5>,
                            ],
                            "className": "column trade",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h4>
                                Total a ser gasto: R$ 
                                0
                                 
                              </h4>,
                              <h5>
                                
                                 
                              </h5>,
                            ],
                            "className": "column trade",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>,
                          "className": "ui two column centered grid",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>,
                          "className": "ui two column centered grid",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <h2>
                       Comprar 
                       
                    </h2>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h2",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <h2>
                         Comprar 
                         
                      </h2>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>,
                    ],
                    "className": "content",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <h2>
                         Comprar 
                         
                      </h2>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>,
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>,
                    ],
                    "className": "content",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 1598,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                      "lineNumber": 162,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 1623,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 163,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1624,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 164,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1626,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 165,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "cart icon",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "cart icon",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1627,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "Comprar",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "Comprar",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Comprar,
                            "tag": 8,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode": <i
                            class="cart icon"
                          />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "i",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <i
                              className="cart icon"
                            />,
                            "Comprar",
                          ],
                          "className": "ui teal labeled icon disabled button",
                          "onClick": [Function],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <i
                              className="cart icon"
                            />,
                            "Comprar",
                          ],
                          "className": "ui teal labeled icon disabled button",
                          "onClick": [Function],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1625,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 168,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "onChange": [Function],
                            "type": "number",
                            "value": 0,
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "onChange": [Function],
                            "type": "number",
                            "value": 0,
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <input
                            type="number"
                            value="0"
                          />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>,
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />,
                        ],
                        "className": "ui left action input",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>,
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />,
                        ],
                        "className": "ui left action input",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>,
                      "className": "actions",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>,
                      "className": "actions",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="actions"
                    >
                      <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>
                    </div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="content"
                  >
                    <h2>
                       Comprar 
                       
                    </h2>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        class="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="content"
                    >
                      <h2>
                         Comprar 
                         
                      </h2>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>,
                    <div
                      className="actions"
                    >
                      <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>
                    </div>,
                  ],
                  "className": "ui modal buy",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="content"
                    >
                      <h2>
                         Comprar 
                         
                      </h2>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                        <div
                          className="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        className="ui two column centered grid"
                      >
                        <div
                          className="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>,
                    <div
                      className="actions"
                    >
                      <div
                        className="ui left action input"
                      >
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />
                      </div>
                    </div>,
                  ],
                  "className": "ui modal buy",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 1596,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                    "lineNumber": 175,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 1628,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                      "lineNumber": 176,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 1630,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 177,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1633,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": " Vender ",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": " Vender ",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1634,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": " ",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": " ",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode":  ,
                          "tag": 8,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode":  Vender ,
                        "tag": 8,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          " Vender ",
                          undefined,
                          " ",
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          " Vender ",
                          undefined,
                          " ",
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 1631,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 178,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1635,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 179,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1637,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 180,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1639,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "Saldo Atual (",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "Saldo Atual (",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1640,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": ") ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": ") ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": ) ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": Saldo Atual (,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                "Saldo Atual (",
                                undefined,
                                ") ",
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                "Saldo Atual (",
                                undefined,
                                ") ",
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1638,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                "lineNumber": 181,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 1641,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "(",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "(",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1642,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": ") ",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": ") ",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 1643,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": null,
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 4,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": " ",
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": " ",
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode":  ,
                                    "tag": 8,
                                    "treeBaseDuration": 0,
                                    "type": null,
                                    "updateQueue": null,
                                  },
                                  "stateNode": ) ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode": (,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  "(",
                                  undefined,
                                  ") ",
                                  undefined,
                                  " ",
                                ],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  "(",
                                  undefined,
                                  ") ",
                                  undefined,
                                  " ",
                                ],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <h4>
                                (
                                ) 
                                 
                              </h4>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "h4",
                              "updateQueue": null,
                            },
                            "stateNode": <h4>
                              Saldo Atual (
                              ) 
                            </h4>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "h4",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h4>
                                Saldo Atual (
                                ) 
                              </h4>,
                              <h4>
                                (
                                ) 
                                 
                              </h4>,
                            ],
                            "className": "column trade",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h4>
                                Saldo Atual (
                                ) 
                              </h4>,
                              <h4>
                                (
                                ) 
                                 
                              </h4>,
                            ],
                            "className": "column trade",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1636,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 183,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1644,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                "lineNumber": 184,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Valor (reais)",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Valor (reais)",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1645,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                  "lineNumber": 185,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 1646,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": "R$ ",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": "R$ ",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": R$ ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": Array [
                                    "R$ ",
                                    undefined,
                                  ],
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": Array [
                                    "R$ ",
                                    undefined,
                                  ],
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <h4>
                                  R$ 
                                </h4>,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "h4",
                                "updateQueue": null,
                              },
                              "stateNode": <h4>
                                Valor (reais)
                              </h4>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "h4",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <h4>
                                  Valor (reais)
                                </h4>,
                                <h4>
                                  R$ 
                                </h4>,
                              ],
                              "className": "column trade",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <h4>
                                  Valor (reais)
                                </h4>,
                                <h4>
                                  R$ 
                                </h4>,
                              ],
                              "className": "column trade",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="column trade"
                            >
                              <h4>
                                Valor (reais)
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <div
                              className="column trade"
                            >
                              <h4>
                                Saldo Atual (
                                ) 
                              </h4>
                              <h4>
                                (
                                ) 
                                 
                              </h4>
                            </div>,
                            <div
                              className="column trade"
                            >
                              <h4>
                                Valor (reais)
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>,
                          ],
                          "className": "ui two column centered grid",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <div
                              className="column trade"
                            >
                              <h4>
                                Saldo Atual (
                                ) 
                              </h4>
                              <h4>
                                (
                                ) 
                                 
                              </h4>
                            </div>,
                            <div
                              className="column trade"
                            >
                              <h4>
                                Valor (reais)
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>,
                          ],
                          "className": "ui two column centered grid",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 1632,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 188,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1647,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 189,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 1648,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                "lineNumber": 190,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 1650,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": "Total a ser recebido: R$ ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": "Total a ser recebido: R$ ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 1651,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": "0",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": "0",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 1652,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": null,
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 2,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": " ",
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": " ",
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode":  ,
                                    "tag": 8,
                                    "treeBaseDuration": 0,
                                    "type": null,
                                    "updateQueue": null,
                                  },
                                  "stateNode": 0,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "stateNode": Total a ser recebido: R$ ,
                                "tag": 8,
                                "treeBaseDuration": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  "Total a ser recebido: R$ ",
                                  0,
                                  " ",
                                ],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  "Total a ser recebido: R$ ",
                                  0,
                                  " ",
                                ],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 1649,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                                  "lineNumber": 191,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 1653,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": null,
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": "",
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": "",
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 1654,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": null,
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": " ",
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": " ",
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode":  ,
                                    "tag": 8,
                                    "treeBaseDuration": 0,
                                    "type": null,
                                    "updateQueue": null,
                                  },
                                  "stateNode": ,
                                  "tag": 8,
                                  "treeBaseDuration": 0,
                                  "type": null,
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": Array [
                                    "",
                                    " ",
                                  ],
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": Array [
                                    "",
                                    " ",
                                  ],
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <h5>
                                  
                                   
                                </h5>,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "h5",
                                "updateQueue": null,
                              },
                              "stateNode": <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "h4",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <h4>
                                  Total a ser recebido: R$ 
                                  0
                                   
                                </h4>,
                                <h5>
                                  
                                   
                                </h5>,
                              ],
                              "className": "column trade",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <h4>
                                  Total a ser recebido: R$ 
                                  0
                                   
                                </h4>,
                                <h5>
                                  
                                   
                                </h5>,
                              ],
                              "className": "column trade",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="column trade"
                            >
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": <div
                              className="column trade"
                            >
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>,
                            "className": "ui two column centered grid",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": <div
                              className="column trade"
                            >
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>,
                            "className": "ui two column centered grid",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <h2>
                         Vender 
                         
                      </h2>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "h2",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <h2>
                           Vender 
                           
                        </h2>,
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            className="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>,
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>,
                      ],
                      "className": "content",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <h2>
                           Vender 
                           
                        </h2>,
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            className="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>,
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>,
                      ],
                      "className": "content",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 1629,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                        "lineNumber": 195,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 1655,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                          "lineNumber": 196,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 1656,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                            "lineNumber": 197,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 1658,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 198,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "cart icon",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "cart icon",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 1659,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "Comprar",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "Comprar",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": Comprar,
                              "tag": 8,
                              "treeBaseDuration": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "stateNode": <i
                              class="cart icon"
                            />,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "i",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <i
                                className="cart icon"
                              />,
                              "Comprar",
                            ],
                            "className": "ui teal labeled icon disabled button",
                            "onClick": [Function],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <i
                                className="cart icon"
                              />,
                              "Comprar",
                            ],
                            "className": "ui teal labeled icon disabled button",
                            "onClick": [Function],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 1657,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/√Årea de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardTrade/DashboardCards.jsx",
                              "lineNumber": 201,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "onChange": [Function],
                              "type": "number",
                              "value": 0,
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "onChange": [Function],
                              "type": "number",
                              "value": 0,
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <input
                              type="number"
                              value="0"
                            />,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <button
                              className="ui teal labeled icon disabled button"
                              onClick={[Function]}
                            >
                              <i
                                className="cart icon"
                              />
                              Comprar
                            </button>,
                            <input
                              onChange={[Function]}
                              type="number"
                              value={0}
                            />,
                          ],
                          "className": "ui left action input",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <button
                              className="ui teal labeled icon disabled button"
                              onClick={[Function]}
                            >
                              <i
                                className="cart icon"
                              />
                              Comprar
                            </button>,
                            <input
                              onChange={[Function]}
                              type="number"
                              value={0}
                            />,
                          ],
                          "className": "ui left action input",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <div
                          className="ui left action input"
                        >
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />
                        </div>,
                        "className": "actions",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <div
                          className="ui left action input"
                        >
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />
                        </div>,
                        "className": "actions",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="content"
                    >
                      <h2>
                         Vender 
                         
                      </h2>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 2,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="content"
                      >
                        <h2>
                           Vender 
                           
                        </h2>
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            className="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>,
                      <div
                        className="actions"
                      >
                        <div
                          className="ui left action input"
                        >
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />
                        </div>
                      </div>,
                    ],
                    "className": "ui modal sell",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="content"
                      >
                        <h2>
                           Vender 
                           
                        </h2>
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            className="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          className="ui two column centered grid"
                        >
                          <div
                            className="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>,
                      <div
                        className="actions"
                      >
                        <div
                          className="ui left action input"
                        >
                          <button
                            className="ui teal labeled icon disabled button"
                            onClick={[Function]}
                          >
                            <i
                              className="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            onChange={[Function]}
                            type="number"
                            value={0}
                          />
                        </div>
                      </div>,
                    ],
                    "className": "ui modal sell",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="ui modal sell"
                  >
                    <div
                      class="content"
                    >
                      <h2>
                         Vender 
                         
                      </h2>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>
                        <div
                          class="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>
                      </div>
                      <div
                        class="ui two column centered grid"
                      >
                        <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>
                      </div>
                    </div>
                    <div
                      class="actions"
                    >
                      <div
                        class="ui left action input"
                      >
                        <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>
                        <input
                          type="number"
                          value="0"
                        />
                      </div>
                    </div>
                  </div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="ui modal buy"
                >
                  <div
                    class="content"
                  >
                    <h2>
                       Comprar 
                       
                    </h2>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        class="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>
                  <div
                    class="actions"
                  >
                    <div
                      class="ui left action input"
                    >
                      <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        type="number"
                        value="0"
                      />
                    </div>
                  </div>
                </div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                Array [],
                <div
                  className="ui modal buy"
                >
                  <div
                    className="content"
                  >
                    <h2>
                       Comprar 
                       
                    </h2>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>
                  <div
                    className="actions"
                  >
                    <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>
                  </div>
                </div>,
                <div
                  className="ui modal sell"
                >
                  <div
                    className="content"
                  >
                    <h2>
                       Vender 
                       
                    </h2>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>
                  <div
                    className="actions"
                  >
                    <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>
                  </div>
                </div>,
              ],
              "className": "ui link cards",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                Array [],
                <div
                  className="ui modal buy"
                >
                  <div
                    className="content"
                  >
                    <h2>
                       Comprar 
                       
                    </h2>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>
                  <div
                    className="actions"
                  >
                    <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>
                  </div>
                </div>,
                <div
                  className="ui modal sell"
                >
                  <div
                    className="content"
                  >
                    <h2>
                       Vender 
                       
                    </h2>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>
                  </div>
                  <div
                    className="actions"
                  >
                    <div
                      className="ui left action input"
                    >
                      <button
                        className="ui teal labeled icon disabled button"
                        onClick={[Function]}
                      >
                        <i
                          className="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        onChange={[Function]}
                        type="number"
                        value={0}
                      />
                    </div>
                  </div>
                </div>,
              ],
              "className": "ui link cards",
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="ui link cards"
            >
              <div
                class="ui modal buy"
              >
                <div
                  class="content"
                >
                  <h2>
                     Comprar 
                     
                  </h2>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>
                <div
                  class="actions"
                >
                  <div
                    class="ui left action input"
                  >
                    <button
                      class="ui teal labeled icon disabled button"
                    >
                      <i
                        class="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      type="number"
                      value="0"
                    />
                  </div>
                </div>
              </div>
              <div
                class="ui modal sell"
              >
                <div
                  class="content"
                >
                  <h2>
                     Vender 
                     
                  </h2>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (
                        ) 
                      </h4>
                      <h4>
                        (
                        ) 
                         
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Valor (reais)
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>
                <div
                  class="actions"
                >
                  <div
                    class="ui left action input"
                  >
                    <button
                      class="ui teal labeled icon disabled button"
                    >
                      <i
                        class="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      type="number"
                      value="0"
                    />
                  </div>
                </div>
              </div>
            </div>,
            "tag": 7,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 5,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "userCryptoAmount": Object {
              "bitcoin_value": 0,
              "brita_value": 0,
              "real_value": 10000,
            },
          },
          "memoizedState": Object {
            "cryptoFocus": Object {},
            "crypto_amount": 0,
            "cryptos": Array [],
            "enableButton": "ui teal labeled icon disabled button",
            "error": "",
            "quantity": 0,
            "real_amount": 0,
            "userCryptoAmounts": "",
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "userCryptoAmount": Object {
              "bitcoin_value": 0,
              "brita_value": 0,
              "real_value": 10000,
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1591,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1589,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 1589,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="ui link cards"
                    >
                      <div
                        class="ui modal buy"
                      >
                        <div
                          class="content"
                        >
                          <h2>
                             Comprar 
                             
                          </h2>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Saldo Atual (R$) 
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>
                            <div
                              class="column trade"
                            >
                              <h4>
                                Pre√ßo 
                                 (
                                )
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>
                          </div>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Total a ser gasto: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>
                          </div>
                        </div>
                        <div
                          class="actions"
                        >
                          <div
                            class="ui left action input"
                          >
                            <button
                              class="ui teal labeled icon disabled button"
                            >
                              <i
                                class="cart icon"
                              />
                              Comprar
                            </button>
                            <input
                              type="number"
                              value="0"
                            />
                          </div>
                        </div>
                      </div>
                      <div
                        class="ui modal sell"
                      >
                        <div
                          class="content"
                        >
                          <h2>
                             Vender 
                             
                          </h2>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Saldo Atual (
                                ) 
                              </h4>
                              <h4>
                                (
                                ) 
                                 
                              </h4>
                            </div>
                            <div
                              class="column trade"
                            >
                              <h4>
                                Valor (reais)
                              </h4>
                              <h4>
                                R$ 
                              </h4>
                            </div>
                          </div>
                          <div
                            class="ui two column centered grid"
                          >
                            <div
                              class="column trade"
                            >
                              <h4>
                                Total a ser recebido: R$ 
                                0
                                 
                              </h4>
                              <h5>
                                
                                 
                              </h5>
                            </div>
                          </div>
                        </div>
                        <div
                          class="actions"
                        >
                          <div
                            class="ui left action input"
                          >
                            <button
                              class="ui teal labeled icon disabled button"
                            >
                              <i
                                class="cart icon"
                              />
                              Comprar
                            </button>
                            <input
                              type="number"
                              value="0"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 19,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Array [],
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Array [],
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui link cards"
                  >
                    <div
                      class="ui modal buy"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Comprar 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (R$) 
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      class="ui modal sell"
                    >
                      <div
                        class="content"
                      >
                        <h2>
                           Vender 
                           
                        </h2>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>
                            <h4>
                              (
                              ) 
                               
                            </h4>
                          </div>
                          <div
                            class="column trade"
                          >
                            <h4>
                              Valor (reais)
                            </h4>
                            <h4>
                              R$ 
                            </h4>
                          </div>
                        </div>
                        <div
                          class="ui two column centered grid"
                        >
                          <div
                            class="column trade"
                          >
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>
                            <h5>
                              
                               
                            </h5>
                          </div>
                        </div>
                      </div>
                      <div
                        class="actions"
                      >
                        <div
                          class="ui left action input"
                        >
                          <button
                            class="ui teal labeled icon disabled button"
                          >
                            <i
                              class="cart icon"
                            />
                            Comprar
                          </button>
                          <input
                            type="number"
                            value="0"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 19,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "userCryptoAmount": Object {
                          "bitcoin_value": 0,
                          "brita_value": 0,
                          "real_value": 10000,
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "changeAmount": [Function],
        "changeAmountSell": [Function],
        "context": Object {},
        "props": Object {
          "userCryptoAmount": Object {
            "bitcoin_value": 0,
            "brita_value": 0,
            "real_value": 10000,
          },
        },
        "refs": Object {},
        "state": Object {
          "cryptoFocus": Object {},
          "crypto_amount": 0,
          "cryptos": Array [],
          "enableButton": "ui teal labeled icon disabled button",
          "error": "",
          "quantity": 0,
          "real_amount": 0,
          "userCryptoAmounts": "",
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "userCryptoAmount": Object {
          "bitcoin_value": 0,
          "brita_value": 0,
          "real_value": 10000,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="ui link cards"
        >
          <div
            class="ui modal buy"
          >
            <div
              class="content"
            >
              <h2>
                 Comprar 
                 
              </h2>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Saldo Atual (R$) 
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
                <div
                  class="column trade"
                >
                  <h4>
                    Pre√ßo 
                     (
                    )
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
              </div>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Total a ser gasto: R$ 
                    0
                     
                  </h4>
                  <h5>
                    
                     
                  </h5>
                </div>
              </div>
            </div>
            <div
              class="actions"
            >
              <div
                class="ui left action input"
              >
                <button
                  class="ui teal labeled icon disabled button"
                >
                  <i
                    class="cart icon"
                  />
                  Comprar
                </button>
                <input
                  type="number"
                  value="0"
                />
              </div>
            </div>
          </div>
          <div
            class="ui modal sell"
          >
            <div
              class="content"
            >
              <h2>
                 Vender 
                 
              </h2>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Saldo Atual (
                    ) 
                  </h4>
                  <h4>
                    (
                    ) 
                     
                  </h4>
                </div>
                <div
                  class="column trade"
                >
                  <h4>
                    Valor (reais)
                  </h4>
                  <h4>
                    R$ 
                  </h4>
                </div>
              </div>
              <div
                class="ui two column centered grid"
              >
                <div
                  class="column trade"
                >
                  <h4>
                    Total a ser recebido: R$ 
                    0
                     
                  </h4>
                  <h5>
                    
                     
                  </h5>
                </div>
              </div>
            </div>
            <div
              class="actions"
            >
              <div
                class="ui left action input"
              >
                <button
                  class="ui teal labeled icon disabled button"
                >
                  <i
                    class="cart icon"
                  />
                  Comprar
                </button>
                <input
                  type="number"
                  value="0"
                />
              </div>
            </div>
          </div>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            Array [],
            <div
              className="ui modal buy"
            >
              <div
                className="content"
              >
                <h2>
                   Comprar 
                   
                </h2>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Saldo Atual (R$) 
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                  <div
                    className="column trade"
                  >
                    <h4>
                      Pre√ßo 
                       (
                      )
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Total a ser gasto: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>
              <div
                className="actions"
              >
                <div
                  className="ui left action input"
                >
                  <button
                    className="ui teal labeled icon disabled button"
                    onClick={[Function]}
                  >
                    <i
                      className="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    onChange={[Function]}
                    type="number"
                    value={0}
                  />
                </div>
              </div>
            </div>,
            <div
              className="ui modal sell"
            >
              <div
                className="content"
              >
                <h2>
                   Vender 
                   
                </h2>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Saldo Atual (
                      ) 
                    </h4>
                    <h4>
                      (
                      ) 
                       
                    </h4>
                  </div>
                  <div
                    className="column trade"
                  >
                    <h4>
                      Valor (reais)
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  className="ui two column centered grid"
                >
                  <div
                    className="column trade"
                  >
                    <h4>
                      Total a ser recebido: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>
              <div
                className="actions"
              >
                <div
                  className="ui left action input"
                >
                  <button
                    className="ui teal labeled icon disabled button"
                    onClick={[Function]}
                  >
                    <i
                      className="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    onChange={[Function]}
                    type="number"
                    value={0}
                  />
                </div>
              </div>
            </div>,
          ],
          "className": "ui link cards",
        },
        "ref": null,
        "rendered": Array [
          null,
          Object {
            "instance": <div
              class="ui modal buy"
            >
              <div
                class="content"
              >
                <h2>
                   Comprar 
                   
                </h2>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Saldo Atual (R$) 
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                  <div
                    class="column trade"
                  >
                    <h4>
                      Pre√ßo 
                       (
                      )
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Total a ser gasto: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>
              <div
                class="actions"
              >
                <div
                  class="ui left action input"
                >
                  <button
                    class="ui teal labeled icon disabled button"
                  >
                    <i
                      class="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    type="number"
                    value="0"
                  />
                </div>
              </div>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="content"
                >
                  <h2>
                     Comprar 
                     
                  </h2>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>,
                <div
                  className="actions"
                >
                  <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>
                </div>,
              ],
              "className": "ui modal buy",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="content"
                >
                  <h2>
                     Comprar 
                     
                  </h2>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (R$) 
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Pre√ßo 
                         (
                        )
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser gasto: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <h2>
                       Comprar 
                       
                    </h2>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>,
                  ],
                  "className": "content",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <h2>
                       Comprar 
                       
                    </h2>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        " Comprar ",
                        undefined,
                        " ",
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      " Comprar ",
                      " ",
                    ],
                    "type": "h2",
                  },
                  Object {
                    "instance": <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (R$) 
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                      <div
                        class="column trade"
                      >
                        <h4>
                          Pre√ßo 
                           (
                          )
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        <div
                          className="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                      ],
                      "className": "ui two column centered grid",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (R$) 
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <h4>
                              Saldo Atual (R$) 
                            </h4>,
                            <h4>
                              R$ 
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <h4>
                              Saldo Atual (R$) 
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Saldo Atual (R$) ",
                            },
                            "ref": null,
                            "rendered": Array [
                              "Saldo Atual (R$) ",
                            ],
                            "type": "h4",
                          },
                          Object {
                            "instance": <h4>
                              R$ 
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "R$ ",
                                undefined,
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "R$ ",
                            ],
                            "type": "h4",
                          },
                        ],
                        "type": "div",
                      },
                      Object {
                        "instance": <div
                          class="column trade"
                        >
                          <h4>
                            Pre√ßo 
                             (
                            )
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>,
                            <h4>
                              R$ 
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <h4>
                              Pre√ßo 
                               (
                              )
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "Pre√ßo ",
                                undefined,
                                " (",
                                undefined,
                                ")",
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "Pre√ßo ",
                              " (",
                              ")",
                            ],
                            "type": "h4",
                          },
                          Object {
                            "instance": <h4>
                              R$ 
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "R$ ",
                                undefined,
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "R$ ",
                            ],
                            "type": "h4",
                          },
                        ],
                        "type": "div",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser gasto: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>,
                      "className": "ui two column centered grid",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser gasto: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>,
                            <h5>
                              
                               
                            </h5>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <h4>
                              Total a ser gasto: R$ 
                              0
                               
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "Total a ser gasto: R$ ",
                                0,
                                " ",
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "Total a ser gasto: R$ ",
                              "0",
                              " ",
                            ],
                            "type": "h4",
                          },
                          Object {
                            "instance": <h5>
                              
                               
                            </h5>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "",
                                " ",
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "",
                              " ",
                            ],
                            "type": "h5",
                          },
                        ],
                        "type": "div",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <div
                  class="actions"
                >
                  <div
                    class="ui left action input"
                  >
                    <button
                      class="ui teal labeled icon disabled button"
                    >
                      <i
                        class="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      type="number"
                      value="0"
                    />
                  </div>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>,
                  "className": "actions",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <div
                      class="ui left action input"
                    >
                      <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        type="number"
                        value="0"
                      />
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>,
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />,
                      ],
                      "className": "ui left action input",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <i
                              className="cart icon"
                            />,
                            "Comprar",
                          ],
                          "className": "ui teal labeled icon disabled button",
                          "onClick": [Function],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <i
                              class="cart icon"
                            />,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "className": "cart icon",
                            },
                            "ref": null,
                            "rendered": Array [
                              undefined,
                            ],
                            "type": "i",
                          },
                          "Comprar",
                        ],
                        "type": "button",
                      },
                      Object {
                        "instance": <input
                          type="number"
                          value="0"
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "onChange": [Function],
                          "type": "number",
                          "value": 0,
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": <div
              class="ui modal sell"
            >
              <div
                class="content"
              >
                <h2>
                   Vender 
                   
                </h2>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Saldo Atual (
                      ) 
                    </h4>
                    <h4>
                      (
                      ) 
                       
                    </h4>
                  </div>
                  <div
                    class="column trade"
                  >
                    <h4>
                      Valor (reais)
                    </h4>
                    <h4>
                      R$ 
                    </h4>
                  </div>
                </div>
                <div
                  class="ui two column centered grid"
                >
                  <div
                    class="column trade"
                  >
                    <h4>
                      Total a ser recebido: R$ 
                      0
                       
                    </h4>
                    <h5>
                      
                       
                    </h5>
                  </div>
                </div>
              </div>
              <div
                class="actions"
              >
                <div
                  class="ui left action input"
                >
                  <button
                    class="ui teal labeled icon disabled button"
                  >
                    <i
                      class="cart icon"
                    />
                    Comprar
                  </button>
                  <input
                    type="number"
                    value="0"
                  />
                </div>
              </div>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="content"
                >
                  <h2>
                     Vender 
                     
                  </h2>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Saldo Atual (
                        ) 
                      </h4>
                      <h4>
                        (
                        ) 
                         
                      </h4>
                    </div>
                    <div
                      className="column trade"
                    >
                      <h4>
                        Valor (reais)
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    className="ui two column centered grid"
                  >
                    <div
                      className="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>,
                <div
                  className="actions"
                >
                  <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>
                </div>,
              ],
              "className": "ui modal sell",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="content"
                >
                  <h2>
                     Vender 
                     
                  </h2>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Saldo Atual (
                        ) 
                      </h4>
                      <h4>
                        (
                        ) 
                         
                      </h4>
                    </div>
                    <div
                      class="column trade"
                    >
                      <h4>
                        Valor (reais)
                      </h4>
                      <h4>
                        R$ 
                      </h4>
                    </div>
                  </div>
                  <div
                    class="ui two column centered grid"
                  >
                    <div
                      class="column trade"
                    >
                      <h4>
                        Total a ser recebido: R$ 
                        0
                         
                      </h4>
                      <h5>
                        
                         
                      </h5>
                    </div>
                  </div>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <h2>
                       Vender 
                       
                    </h2>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>
                      <div
                        className="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>,
                    <div
                      className="ui two column centered grid"
                    >
                      <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>,
                  ],
                  "className": "content",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <h2>
                       Vender 
                       
                    </h2>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        " Vender ",
                        undefined,
                        " ",
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      " Vender ",
                      " ",
                    ],
                    "type": "h2",
                  },
                  Object {
                    "instance": <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Saldo Atual (
                          ) 
                        </h4>
                        <h4>
                          (
                          ) 
                           
                        </h4>
                      </div>
                      <div
                        class="column trade"
                      >
                        <h4>
                          Valor (reais)
                        </h4>
                        <h4>
                          R$ 
                        </h4>
                      </div>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <div
                          className="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>,
                        <div
                          className="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                      ],
                      "className": "ui two column centered grid",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <div
                          class="column trade"
                        >
                          <h4>
                            Saldo Atual (
                            ) 
                          </h4>
                          <h4>
                            (
                            ) 
                             
                          </h4>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <h4>
                              Saldo Atual (
                              ) 
                            </h4>,
                            <h4>
                              (
                              ) 
                               
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <h4>
                              Saldo Atual (
                              ) 
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "Saldo Atual (",
                                undefined,
                                ") ",
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "Saldo Atual (",
                              ") ",
                            ],
                            "type": "h4",
                          },
                          Object {
                            "instance": <h4>
                              (
                              ) 
                               
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "(",
                                undefined,
                                ") ",
                                undefined,
                                " ",
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "(",
                              ") ",
                              " ",
                            ],
                            "type": "h4",
                          },
                        ],
                        "type": "div",
                      },
                      Object {
                        "instance": <div
                          class="column trade"
                        >
                          <h4>
                            Valor (reais)
                          </h4>
                          <h4>
                            R$ 
                          </h4>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <h4>
                              Valor (reais)
                            </h4>,
                            <h4>
                              R$ 
                            </h4>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <h4>
                              Valor (reais)
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Valor (reais)",
                            },
                            "ref": null,
                            "rendered": Array [
                              "Valor (reais)",
                            ],
                            "type": "h4",
                          },
                          Object {
                            "instance": <h4>
                              R$ 
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "R$ ",
                                undefined,
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "R$ ",
                            ],
                            "type": "h4",
                          },
                        ],
                        "type": "div",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <div
                      class="ui two column centered grid"
                    >
                      <div
                        class="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="column trade"
                      >
                        <h4>
                          Total a ser recebido: R$ 
                          0
                           
                        </h4>
                        <h5>
                          
                           
                        </h5>
                      </div>,
                      "className": "ui two column centered grid",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <div
                          class="column trade"
                        >
                          <h4>
                            Total a ser recebido: R$ 
                            0
                             
                          </h4>
                          <h5>
                            
                             
                          </h5>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>,
                            <h5>
                              
                               
                            </h5>,
                          ],
                          "className": "column trade",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <h4>
                              Total a ser recebido: R$ 
                              0
                               
                            </h4>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "Total a ser recebido: R$ ",
                                0,
                                " ",
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "Total a ser recebido: R$ ",
                              "0",
                              " ",
                            ],
                            "type": "h4",
                          },
                          Object {
                            "instance": <h5>
                              
                               
                            </h5>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                "",
                                " ",
                              ],
                            },
                            "ref": null,
                            "rendered": Array [
                              "",
                              " ",
                            ],
                            "type": "h5",
                          },
                        ],
                        "type": "div",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <div
                  class="actions"
                >
                  <div
                    class="ui left action input"
                  >
                    <button
                      class="ui teal labeled icon disabled button"
                    >
                      <i
                        class="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      type="number"
                      value="0"
                    />
                  </div>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="ui left action input"
                  >
                    <button
                      className="ui teal labeled icon disabled button"
                      onClick={[Function]}
                    >
                      <i
                        className="cart icon"
                      />
                      Comprar
                    </button>
                    <input
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>,
                  "className": "actions",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <div
                      class="ui left action input"
                    >
                      <button
                        class="ui teal labeled icon disabled button"
                      >
                        <i
                          class="cart icon"
                        />
                        Comprar
                      </button>
                      <input
                        type="number"
                        value="0"
                      />
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <button
                          className="ui teal labeled icon disabled button"
                          onClick={[Function]}
                        >
                          <i
                            className="cart icon"
                          />
                          Comprar
                        </button>,
                        <input
                          onChange={[Function]}
                          type="number"
                          value={0}
                        />,
                      ],
                      "className": "ui left action input",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <button
                          class="ui teal labeled icon disabled button"
                        >
                          <i
                            class="cart icon"
                          />
                          Comprar
                        </button>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <i
                              className="cart icon"
                            />,
                            "Comprar",
                          ],
                          "className": "ui teal labeled icon disabled button",
                          "onClick": [Function],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <i
                              class="cart icon"
                            />,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "className": "cart icon",
                            },
                            "ref": null,
                            "rendered": Array [
                              undefined,
                            ],
                            "type": "i",
                          },
                          "Comprar",
                        ],
                        "type": "button",
                      },
                      Object {
                        "instance": <input
                          type="number"
                          value="0"
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "onChange": [Function],
                          "type": "number",
                          "value": 0,
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
