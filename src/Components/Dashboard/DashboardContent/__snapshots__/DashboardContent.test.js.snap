// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DashboardContent Component should render 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <DashboardContent
    userCryptoAmount={
      Object {
        "bitcoin_value": 0,
        "brita_value": 0,
        "real_value": 10000,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": DashboardContent {
      "_reactInternalFiber": FiberNode {
        "_debugID": 88,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 87,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 85,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 85,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui grid"
                  >
                    <div
                      class="sixteen wide column"
                    >
                      <h1>
                        Patrimônio Total
                      </h1>
                      <br />
                      <div
                        class="ui  one column centered grid"
                      >
                        <div
                          class="ui statistics"
                        >
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            >
                              10000
                            </div>
                            <div
                              class="label"
                            >
                               R$ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               ฿ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               $ 
                            </div>
                          </div>
                        </div>
                      </div>
                      <br />
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 13,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "userCryptoAmount": Object {
                      "bitcoin_value": 0,
                      "brita_value": 0,
                      "real_value": 10000,
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="ui grid"
                >
                  <div
                    class="sixteen wide column"
                  >
                    <h1>
                      Patrimônio Total
                    </h1>
                    <br />
                    <div
                      class="ui  one column centered grid"
                    >
                      <div
                        class="ui statistics"
                      >
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          >
                            10000
                          </div>
                          <div
                            class="label"
                          >
                             R$ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             ฿ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             $ 
                          </div>
                        </div>
                      </div>
                    </div>
                    <br />
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 13,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Array [],
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Array [],
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 89,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": Object {
            "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
            "lineNumber": 20,
          },
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 90,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
              "lineNumber": 21,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 91,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                "lineNumber": 22,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": "Patrimônio Total",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": "Patrimônio Total",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 92,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                  "lineNumber": 23,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {},
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {},
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 93,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                    "lineNumber": 24,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 95,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                      "lineNumber": 25,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 96,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                        "lineNumber": 26,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 99,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                          "lineNumber": 27,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": 10000,
                          "className": "value",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": 10000,
                          "className": "value",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 100,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                            "lineNumber": 30,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": " R$ ",
                            "className": "label",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": " R$ ",
                            "className": "label",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="label"
                          >
                             R$ 
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="value"
                        >
                          10000
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="value"
                          >
                            10000
                          </div>,
                          <div
                            className="label"
                          >
                             R$ 
                          </div>,
                        ],
                        "className": "statistic",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="value"
                          >
                            10000
                          </div>,
                          <div
                            className="label"
                          >
                             R$ 
                          </div>,
                        ],
                        "className": "statistic",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 97,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                          "lineNumber": 32,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 101,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                            "lineNumber": 33,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": undefined,
                            "className": "value",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": undefined,
                            "className": "value",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 102,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                              "lineNumber": 36,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": " ฿ ",
                              "className": "label",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": " ฿ ",
                              "className": "label",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="label"
                            >
                               ฿ 
                            </div>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="value"
                          />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <div
                              className="value"
                            />,
                            <div
                              className="label"
                            >
                               ฿ 
                            </div>,
                          ],
                          "className": "statistic",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <div
                              className="value"
                            />,
                            <div
                              className="label"
                            >
                               ฿ 
                            </div>,
                          ],
                          "className": "statistic",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 98,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                            "lineNumber": 38,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 103,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                              "lineNumber": 39,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": undefined,
                              "className": "value",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": undefined,
                              "className": "value",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 104,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                                "lineNumber": 42,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": " $ ",
                                "className": "label",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": " $ ",
                                "className": "label",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <div
                                class="label"
                              >
                                 $ 
                              </div>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="value"
                            />,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="value"
                              />,
                              <div
                                className="label"
                              >
                                 $ 
                              </div>,
                            ],
                            "className": "statistic",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="value"
                              />,
                              <div
                                className="label"
                              >
                                 $ 
                              </div>,
                            ],
                            "className": "statistic",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               $ 
                            </div>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             ฿ 
                          </div>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        >
                          10000
                        </div>
                        <div
                          class="label"
                        >
                           R$ 
                        </div>
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          >
                            10000
                          </div>
                          <div
                            className="label"
                          >
                             R$ 
                          </div>
                        </div>,
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             ฿ 
                          </div>
                        </div>,
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             $ 
                          </div>
                        </div>,
                      ],
                      "className": "ui statistics",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          >
                            10000
                          </div>
                          <div
                            className="label"
                          >
                             R$ 
                          </div>
                        </div>,
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             ฿ 
                          </div>
                        </div>,
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             $ 
                          </div>
                        </div>,
                      ],
                      "className": "ui statistics",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="ui statistics"
                    >
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        >
                          10000
                        </div>
                        <div
                          class="label"
                        >
                           R$ 
                        </div>
                      </div>
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           ฿ 
                        </div>
                      </div>
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           $ 
                        </div>
                      </div>
                    </div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 2,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="ui statistics"
                    >
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        >
                          10000
                        </div>
                        <div
                          className="label"
                        >
                           R$ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           ฿ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           $ 
                        </div>
                      </div>
                    </div>,
                    "className": "ui  one column centered grid",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="ui statistics"
                    >
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        >
                          10000
                        </div>
                        <div
                          className="label"
                        >
                           R$ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           ฿ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           $ 
                        </div>
                      </div>
                    </div>,
                    "className": "ui  one column centered grid",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 94,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                      "lineNumber": 46,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 3,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {},
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {},
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <br />,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "br",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="ui  one column centered grid"
                  >
                    <div
                      class="ui statistics"
                    >
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        >
                          10000
                        </div>
                        <div
                          class="label"
                        >
                           R$ 
                        </div>
                      </div>
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           ฿ 
                        </div>
                      </div>
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           $ 
                        </div>
                      </div>
                    </div>
                  </div>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <br />,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "br",
                "updateQueue": null,
              },
              "stateNode": <h1>
                Patrimônio Total
              </h1>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "h1",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <h1>
                  Patrimônio Total
                </h1>,
                <br />,
                <div
                  className="ui  one column centered grid"
                >
                  <div
                    className="ui statistics"
                  >
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      >
                        10000
                      </div>
                      <div
                        className="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>,
                <br />,
              ],
              "className": "sixteen wide column",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <h1>
                  Patrimônio Total
                </h1>,
                <br />,
                <div
                  className="ui  one column centered grid"
                >
                  <div
                    className="ui statistics"
                  >
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      >
                        10000
                      </div>
                      <div
                        className="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>,
                <br />,
              ],
              "className": "sixteen wide column",
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="sixteen wide column"
            >
              <h1>
                Patrimônio Total
              </h1>
              <br />
              <div
                class="ui  one column centered grid"
              >
                <div
                  class="ui statistics"
                >
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    >
                      10000
                    </div>
                    <div
                      class="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>
              </div>
              <br />
            </div>,
            "tag": 7,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 0,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <div
              className="sixteen wide column"
            >
              <h1>
                Patrimônio Total
              </h1>
              <br />
              <div
                className="ui  one column centered grid"
              >
                <div
                  className="ui statistics"
                >
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    >
                      10000
                    </div>
                    <div
                      className="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>
              </div>
              <br />
            </div>,
            "className": "ui grid",
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <div
              className="sixteen wide column"
            >
              <h1>
                Patrimônio Total
              </h1>
              <br />
              <div
                className="ui  one column centered grid"
              >
                <div
                  className="ui statistics"
                >
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    >
                      10000
                    </div>
                    <div
                      className="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>
              </div>
              <br />
            </div>,
            "className": "ui grid",
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": <div
            class="ui grid"
          >
            <div
              class="sixteen wide column"
            >
              <h1>
                Patrimônio Total
              </h1>
              <br />
              <div
                class="ui  one column centered grid"
              >
                <div
                  class="ui statistics"
                >
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    >
                      10000
                    </div>
                    <div
                      class="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>
              </div>
              <br />
            </div>
          </div>,
          "tag": 7,
          "treeBaseDuration": 0,
          "type": "div",
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "effectTag": 5,
        "expirationTime": 0,
        "firstContextDependency": null,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "userCryptoAmount": Object {
            "bitcoin_value": 0,
            "brita_value": 0,
            "real_value": 10000,
          },
        },
        "memoizedState": Object {
          "userCryptoAmount": "",
        },
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "userCryptoAmount": Object {
            "bitcoin_value": 0,
            "brita_value": 0,
            "real_value": 10000,
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 87,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "userCryptoAmount": Object {
                "bitcoin_value": 0,
                "brita_value": 0,
                "real_value": 10000,
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 85,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 85,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui grid"
                  >
                    <div
                      class="sixteen wide column"
                    >
                      <h1>
                        Patrimônio Total
                      </h1>
                      <br />
                      <div
                        class="ui  one column centered grid"
                      >
                        <div
                          class="ui statistics"
                        >
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            >
                              10000
                            </div>
                            <div
                              class="label"
                            >
                               R$ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               ฿ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               $ 
                            </div>
                          </div>
                        </div>
                      </div>
                      <br />
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 13,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "userCryptoAmount": Object {
                            "bitcoin_value": 0,
                            "brita_value": 0,
                            "real_value": 10000,
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "userCryptoAmount": Object {
                      "bitcoin_value": 0,
                      "brita_value": 0,
                      "real_value": 10000,
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="ui grid"
                >
                  <div
                    class="sixteen wide column"
                  >
                    <h1>
                      Patrimônio Total
                    </h1>
                    <br />
                    <div
                      class="ui  one column centered grid"
                    >
                      <div
                        class="ui statistics"
                      >
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          >
                            10000
                          </div>
                          <div
                            class="label"
                          >
                             R$ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             ฿ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             $ 
                          </div>
                        </div>
                      </div>
                    </div>
                    <br />
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 13,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Array [],
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Array [],
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {
        "userCryptoAmount": Object {
          "bitcoin_value": 0,
          "brita_value": 0,
          "real_value": 10000,
        },
      },
      "refs": Object {},
      "state": Object {
        "userCryptoAmount": "",
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "userCryptoAmount": Object {
        "bitcoin_value": 0,
        "brita_value": 0,
        "real_value": 10000,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="ui grid"
      >
        <div
          class="sixteen wide column"
        >
          <h1>
            Patrimônio Total
          </h1>
          <br />
          <div
            class="ui  one column centered grid"
          >
            <div
              class="ui statistics"
            >
              <div
                class="statistic"
              >
                <div
                  class="value"
                >
                  10000
                </div>
                <div
                  class="label"
                >
                   R$ 
                </div>
              </div>
              <div
                class="statistic"
              >
                <div
                  class="value"
                />
                <div
                  class="label"
                >
                   ฿ 
                </div>
              </div>
              <div
                class="statistic"
              >
                <div
                  class="value"
                />
                <div
                  class="label"
                >
                   $ 
                </div>
              </div>
            </div>
          </div>
          <br />
        </div>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="sixteen wide column"
        >
          <h1>
            Patrimônio Total
          </h1>
          <br />
          <div
            className="ui  one column centered grid"
          >
            <div
              className="ui statistics"
            >
              <div
                className="statistic"
              >
                <div
                  className="value"
                >
                  10000
                </div>
                <div
                  className="label"
                >
                   R$ 
                </div>
              </div>
              <div
                className="statistic"
              >
                <div
                  className="value"
                />
                <div
                  className="label"
                >
                   ฿ 
                </div>
              </div>
              <div
                className="statistic"
              >
                <div
                  className="value"
                />
                <div
                  className="label"
                >
                   $ 
                </div>
              </div>
            </div>
          </div>
          <br />
        </div>,
        "className": "ui grid",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <div
            class="sixteen wide column"
          >
            <h1>
              Patrimônio Total
            </h1>
            <br />
            <div
              class="ui  one column centered grid"
            >
              <div
                class="ui statistics"
              >
                <div
                  class="statistic"
                >
                  <div
                    class="value"
                  >
                    10000
                  </div>
                  <div
                    class="label"
                  >
                     R$ 
                  </div>
                </div>
                <div
                  class="statistic"
                >
                  <div
                    class="value"
                  />
                  <div
                    class="label"
                  >
                     ฿ 
                  </div>
                </div>
                <div
                  class="statistic"
                >
                  <div
                    class="value"
                  />
                  <div
                    class="label"
                  >
                     $ 
                  </div>
                </div>
              </div>
            </div>
            <br />
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                Patrimônio Total
              </h1>,
              <br />,
              <div
                className="ui  one column centered grid"
              >
                <div
                  className="ui statistics"
                >
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    >
                      10000
                    </div>
                    <div
                      className="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>
              </div>,
              <br />,
            ],
            "className": "sixteen wide column",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <h1>
                Patrimônio Total
              </h1>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Patrimônio Total",
              },
              "ref": null,
              "rendered": Array [
                "Patrimônio Total",
              ],
              "type": "h1",
            },
            Object {
              "instance": <br />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "br",
            },
            Object {
              "instance": <div
                class="ui  one column centered grid"
              >
                <div
                  class="ui statistics"
                >
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    >
                      10000
                    </div>
                    <div
                      class="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="ui statistics"
                >
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    >
                      10000
                    </div>
                    <div
                      className="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    className="statistic"
                  >
                    <div
                      className="value"
                    />
                    <div
                      className="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>,
                "className": "ui  one column centered grid",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="ui statistics"
                  >
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      >
                        10000
                      </div>
                      <div
                        class="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        >
                          10000
                        </div>
                        <div
                          className="label"
                        >
                           R$ 
                        </div>
                      </div>,
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           ฿ 
                        </div>
                      </div>,
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           $ 
                        </div>
                      </div>,
                    ],
                    "className": "ui statistics",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        >
                          10000
                        </div>
                        <div
                          class="label"
                        >
                           R$ 
                        </div>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <div
                            className="value"
                          >
                            10000
                          </div>,
                          <div
                            className="label"
                          >
                             R$ 
                          </div>,
                        ],
                        "className": "statistic",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <div
                            class="value"
                          >
                            10000
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": 10000,
                            "className": "value",
                          },
                          "ref": null,
                          "rendered": Array [
                            10000,
                          ],
                          "type": "div",
                        },
                        Object {
                          "instance": <div
                            class="label"
                          >
                             R$ 
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": " R$ ",
                            "className": "label",
                          },
                          "ref": null,
                          "rendered": Array [
                            " R$ ",
                          ],
                          "type": "div",
                        },
                      ],
                      "type": "div",
                    },
                    Object {
                      "instance": <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           ฿ 
                        </div>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <div
                            className="value"
                          />,
                          <div
                            className="label"
                          >
                             ฿ 
                          </div>,
                        ],
                        "className": "statistic",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <div
                            class="value"
                          />,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": undefined,
                            "className": "value",
                          },
                          "ref": null,
                          "rendered": Array [
                            undefined,
                          ],
                          "type": "div",
                        },
                        Object {
                          "instance": <div
                            class="label"
                          >
                             ฿ 
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": " ฿ ",
                            "className": "label",
                          },
                          "ref": null,
                          "rendered": Array [
                            " ฿ ",
                          ],
                          "type": "div",
                        },
                      ],
                      "type": "div",
                    },
                    Object {
                      "instance": <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           $ 
                        </div>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <div
                            className="value"
                          />,
                          <div
                            className="label"
                          >
                             $ 
                          </div>,
                        ],
                        "className": "statistic",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <div
                            class="value"
                          />,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": undefined,
                            "className": "value",
                          },
                          "ref": null,
                          "rendered": Array [
                            undefined,
                          ],
                          "type": "div",
                        },
                        Object {
                          "instance": <div
                            class="label"
                          >
                             $ 
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": " $ ",
                            "className": "label",
                          },
                          "ref": null,
                          "rendered": Array [
                            " $ ",
                          ],
                          "type": "div",
                        },
                      ],
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <br />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "br",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": DashboardContent {
        "_reactInternalFiber": FiberNode {
          "_debugID": 88,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 87,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 85,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 85,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="ui grid"
                    >
                      <div
                        class="sixteen wide column"
                      >
                        <h1>
                          Patrimônio Total
                        </h1>
                        <br />
                        <div
                          class="ui  one column centered grid"
                        >
                          <div
                            class="ui statistics"
                          >
                            <div
                              class="statistic"
                            >
                              <div
                                class="value"
                              >
                                10000
                              </div>
                              <div
                                class="label"
                              >
                                 R$ 
                              </div>
                            </div>
                            <div
                              class="statistic"
                            >
                              <div
                                class="value"
                              />
                              <div
                                class="label"
                              >
                                 ฿ 
                              </div>
                            </div>
                            <div
                              class="statistic"
                            >
                              <div
                                class="value"
                              />
                              <div
                                class="label"
                              >
                                 $ 
                              </div>
                            </div>
                          </div>
                        </div>
                        <br />
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 13,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Array [],
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Array [],
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui grid"
                  >
                    <div
                      class="sixteen wide column"
                    >
                      <h1>
                        Patrimônio Total
                      </h1>
                      <br />
                      <div
                        class="ui  one column centered grid"
                      >
                        <div
                          class="ui statistics"
                        >
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            >
                              10000
                            </div>
                            <div
                              class="label"
                            >
                               R$ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               ฿ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               $ 
                            </div>
                          </div>
                        </div>
                      </div>
                      <br />
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 13,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "userCryptoAmount": Object {
                          "bitcoin_value": 0,
                          "brita_value": 0,
                          "real_value": 10000,
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 89,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
              "lineNumber": 20,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 90,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                "lineNumber": 21,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 91,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                  "lineNumber": 22,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Patrimônio Total",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Patrimônio Total",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 92,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                    "lineNumber": 23,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {},
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {},
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 93,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                      "lineNumber": 24,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 95,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                        "lineNumber": 25,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 96,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                          "lineNumber": 26,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 99,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                            "lineNumber": 27,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": 10000,
                            "className": "value",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": 10000,
                            "className": "value",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 100,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                              "lineNumber": 30,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": " R$ ",
                              "className": "label",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": " R$ ",
                              "className": "label",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="label"
                            >
                               R$ 
                            </div>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="value"
                          >
                            10000
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <div
                              className="value"
                            >
                              10000
                            </div>,
                            <div
                              className="label"
                            >
                               R$ 
                            </div>,
                          ],
                          "className": "statistic",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <div
                              className="value"
                            >
                              10000
                            </div>,
                            <div
                              className="label"
                            >
                               R$ 
                            </div>,
                          ],
                          "className": "statistic",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 97,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                            "lineNumber": 32,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 101,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                              "lineNumber": 33,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": undefined,
                              "className": "value",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": undefined,
                              "className": "value",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 102,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                                "lineNumber": 36,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": " ฿ ",
                                "className": "label",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": " ฿ ",
                                "className": "label",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <div
                                class="label"
                              >
                                 ฿ 
                              </div>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="value"
                            />,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="value"
                              />,
                              <div
                                className="label"
                              >
                                 ฿ 
                              </div>,
                            ],
                            "className": "statistic",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="value"
                              />,
                              <div
                                className="label"
                              >
                                 ฿ 
                              </div>,
                            ],
                            "className": "statistic",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 98,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                              "lineNumber": 38,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 103,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                                "lineNumber": 39,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": undefined,
                                "className": "value",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": undefined,
                                "className": "value",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 104,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                                  "lineNumber": 42,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": " $ ",
                                  "className": "label",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": " $ ",
                                  "className": "label",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <div
                                  class="label"
                                >
                                   $ 
                                </div>,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="value"
                              />,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <div
                                  className="value"
                                />,
                                <div
                                  className="label"
                                >
                                   $ 
                                </div>,
                              ],
                              "className": "statistic",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <div
                                  className="value"
                                />,
                                <div
                                  className="label"
                                >
                                   $ 
                                </div>,
                              ],
                              "className": "statistic",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="statistic"
                            >
                              <div
                                class="value"
                              />
                              <div
                                class="label"
                              >
                                 $ 
                              </div>
                            </div>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               ฿ 
                            </div>
                          </div>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          >
                            10000
                          </div>
                          <div
                            class="label"
                          >
                             R$ 
                          </div>
                        </div>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="statistic"
                          >
                            <div
                              className="value"
                            >
                              10000
                            </div>
                            <div
                              className="label"
                            >
                               R$ 
                            </div>
                          </div>,
                          <div
                            className="statistic"
                          >
                            <div
                              className="value"
                            />
                            <div
                              className="label"
                            >
                               ฿ 
                            </div>
                          </div>,
                          <div
                            className="statistic"
                          >
                            <div
                              className="value"
                            />
                            <div
                              className="label"
                            >
                               $ 
                            </div>
                          </div>,
                        ],
                        "className": "ui statistics",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="statistic"
                          >
                            <div
                              className="value"
                            >
                              10000
                            </div>
                            <div
                              className="label"
                            >
                               R$ 
                            </div>
                          </div>,
                          <div
                            className="statistic"
                          >
                            <div
                              className="value"
                            />
                            <div
                              className="label"
                            >
                               ฿ 
                            </div>
                          </div>,
                          <div
                            className="statistic"
                          >
                            <div
                              className="value"
                            />
                            <div
                              className="label"
                            >
                               $ 
                            </div>
                          </div>,
                        ],
                        "className": "ui statistics",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="ui statistics"
                      >
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          >
                            10000
                          </div>
                          <div
                            class="label"
                          >
                             R$ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             ฿ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             $ 
                          </div>
                        </div>
                      </div>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <div
                        className="ui statistics"
                      >
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          >
                            10000
                          </div>
                          <div
                            className="label"
                          >
                             R$ 
                          </div>
                        </div>
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             ฿ 
                          </div>
                        </div>
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             $ 
                          </div>
                        </div>
                      </div>,
                      "className": "ui  one column centered grid",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <div
                        className="ui statistics"
                      >
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          >
                            10000
                          </div>
                          <div
                            className="label"
                          >
                             R$ 
                          </div>
                        </div>
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             ฿ 
                          </div>
                        </div>
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             $ 
                          </div>
                        </div>
                      </div>,
                      "className": "ui  one column centered grid",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 94,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/carlos/Área de Trabalho/projetos/challenge-crypto/src/Components/Dashboard/DashboardContent/DashboardContent.jsx",
                        "lineNumber": 46,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 3,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {},
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {},
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <br />,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "br",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="ui  one column centered grid"
                    >
                      <div
                        class="ui statistics"
                      >
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          >
                            10000
                          </div>
                          <div
                            class="label"
                          >
                             R$ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             ฿ 
                          </div>
                        </div>
                        <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             $ 
                          </div>
                        </div>
                      </div>
                    </div>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <br />,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "br",
                  "updateQueue": null,
                },
                "stateNode": <h1>
                  Patrimônio Total
                </h1>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "h1",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <h1>
                    Patrimônio Total
                  </h1>,
                  <br />,
                  <div
                    className="ui  one column centered grid"
                  >
                    <div
                      className="ui statistics"
                    >
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        >
                          10000
                        </div>
                        <div
                          className="label"
                        >
                           R$ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           ฿ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           $ 
                        </div>
                      </div>
                    </div>
                  </div>,
                  <br />,
                ],
                "className": "sixteen wide column",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <h1>
                    Patrimônio Total
                  </h1>,
                  <br />,
                  <div
                    className="ui  one column centered grid"
                  >
                    <div
                      className="ui statistics"
                    >
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        >
                          10000
                        </div>
                        <div
                          className="label"
                        >
                           R$ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           ฿ 
                        </div>
                      </div>
                      <div
                        className="statistic"
                      >
                        <div
                          className="value"
                        />
                        <div
                          className="label"
                        >
                           $ 
                        </div>
                      </div>
                    </div>
                  </div>,
                  <br />,
                ],
                "className": "sixteen wide column",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                class="sixteen wide column"
              >
                <h1>
                  Patrimônio Total
                </h1>
                <br />
                <div
                  class="ui  one column centered grid"
                >
                  <div
                    class="ui statistics"
                  >
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      >
                        10000
                      </div>
                      <div
                        class="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>
                <br />
              </div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <div
                className="sixteen wide column"
              >
                <h1>
                  Patrimônio Total
                </h1>
                <br />
                <div
                  className="ui  one column centered grid"
                >
                  <div
                    className="ui statistics"
                  >
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      >
                        10000
                      </div>
                      <div
                        className="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>
                <br />
              </div>,
              "className": "ui grid",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <div
                className="sixteen wide column"
              >
                <h1>
                  Patrimônio Total
                </h1>
                <br />
                <div
                  className="ui  one column centered grid"
                >
                  <div
                    className="ui statistics"
                  >
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      >
                        10000
                      </div>
                      <div
                        className="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>
                <br />
              </div>,
              "className": "ui grid",
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="ui grid"
            >
              <div
                class="sixteen wide column"
              >
                <h1>
                  Patrimônio Total
                </h1>
                <br />
                <div
                  class="ui  one column centered grid"
                >
                  <div
                    class="ui statistics"
                  >
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      >
                        10000
                      </div>
                      <div
                        class="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>
                <br />
              </div>
            </div>,
            "tag": 7,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 5,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "userCryptoAmount": Object {
              "bitcoin_value": 0,
              "brita_value": 0,
              "real_value": 10000,
            },
          },
          "memoizedState": Object {
            "userCryptoAmount": "",
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "userCryptoAmount": Object {
              "bitcoin_value": 0,
              "brita_value": 0,
              "real_value": 10000,
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 87,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "userCryptoAmount": Object {
                  "bitcoin_value": 0,
                  "brita_value": 0,
                  "real_value": 10000,
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 85,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 85,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="ui grid"
                    >
                      <div
                        class="sixteen wide column"
                      >
                        <h1>
                          Patrimônio Total
                        </h1>
                        <br />
                        <div
                          class="ui  one column centered grid"
                        >
                          <div
                            class="ui statistics"
                          >
                            <div
                              class="statistic"
                            >
                              <div
                                class="value"
                              >
                                10000
                              </div>
                              <div
                                class="label"
                              >
                                 R$ 
                              </div>
                            </div>
                            <div
                              class="statistic"
                            >
                              <div
                                class="value"
                              />
                              <div
                                class="label"
                              >
                                 ฿ 
                              </div>
                            </div>
                            <div
                              class="statistic"
                            >
                              <div
                                class="value"
                              />
                              <div
                                class="label"
                              >
                                 $ 
                              </div>
                            </div>
                          </div>
                        </div>
                        <br />
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 13,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Array [],
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Array [],
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "userCryptoAmount": Object {
                              "bitcoin_value": 0,
                              "brita_value": 0,
                              "real_value": 10000,
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "userCryptoAmount": Object {
                        "bitcoin_value": 0,
                        "brita_value": 0,
                        "real_value": 10000,
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="ui grid"
                  >
                    <div
                      class="sixteen wide column"
                    >
                      <h1>
                        Patrimônio Total
                      </h1>
                      <br />
                      <div
                        class="ui  one column centered grid"
                      >
                        <div
                          class="ui statistics"
                        >
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            >
                              10000
                            </div>
                            <div
                              class="label"
                            >
                               R$ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               ฿ 
                            </div>
                          </div>
                          <div
                            class="statistic"
                          >
                            <div
                              class="value"
                            />
                            <div
                              class="label"
                            >
                               $ 
                            </div>
                          </div>
                        </div>
                      </div>
                      <br />
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 13,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Array [],
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Array [],
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "userCryptoAmount": Object {
                          "bitcoin_value": 0,
                          "brita_value": 0,
                          "real_value": 10000,
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "userCryptoAmount": Object {
                    "bitcoin_value": 0,
                    "brita_value": 0,
                    "real_value": 10000,
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "userCryptoAmount": Object {
            "bitcoin_value": 0,
            "brita_value": 0,
            "real_value": 10000,
          },
        },
        "refs": Object {},
        "state": Object {
          "userCryptoAmount": "",
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "userCryptoAmount": Object {
          "bitcoin_value": 0,
          "brita_value": 0,
          "real_value": 10000,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="ui grid"
        >
          <div
            class="sixteen wide column"
          >
            <h1>
              Patrimônio Total
            </h1>
            <br />
            <div
              class="ui  one column centered grid"
            >
              <div
                class="ui statistics"
              >
                <div
                  class="statistic"
                >
                  <div
                    class="value"
                  >
                    10000
                  </div>
                  <div
                    class="label"
                  >
                     R$ 
                  </div>
                </div>
                <div
                  class="statistic"
                >
                  <div
                    class="value"
                  />
                  <div
                    class="label"
                  >
                     ฿ 
                  </div>
                </div>
                <div
                  class="statistic"
                >
                  <div
                    class="value"
                  />
                  <div
                    class="label"
                  >
                     $ 
                  </div>
                </div>
              </div>
            </div>
            <br />
          </div>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="sixteen wide column"
          >
            <h1>
              Patrimônio Total
            </h1>
            <br />
            <div
              className="ui  one column centered grid"
            >
              <div
                className="ui statistics"
              >
                <div
                  className="statistic"
                >
                  <div
                    className="value"
                  >
                    10000
                  </div>
                  <div
                    className="label"
                  >
                     R$ 
                  </div>
                </div>
                <div
                  className="statistic"
                >
                  <div
                    className="value"
                  />
                  <div
                    className="label"
                  >
                     ฿ 
                  </div>
                </div>
                <div
                  className="statistic"
                >
                  <div
                    className="value"
                  />
                  <div
                    className="label"
                  >
                     $ 
                  </div>
                </div>
              </div>
            </div>
            <br />
          </div>,
          "className": "ui grid",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <div
              class="sixteen wide column"
            >
              <h1>
                Patrimônio Total
              </h1>
              <br />
              <div
                class="ui  one column centered grid"
              >
                <div
                  class="ui statistics"
                >
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    >
                      10000
                    </div>
                    <div
                      class="label"
                    >
                       R$ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       ฿ 
                    </div>
                  </div>
                  <div
                    class="statistic"
                  >
                    <div
                      class="value"
                    />
                    <div
                      class="label"
                    >
                       $ 
                    </div>
                  </div>
                </div>
              </div>
              <br />
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h1>
                  Patrimônio Total
                </h1>,
                <br />,
                <div
                  className="ui  one column centered grid"
                >
                  <div
                    className="ui statistics"
                  >
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      >
                        10000
                      </div>
                      <div
                        className="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>,
                <br />,
              ],
              "className": "sixteen wide column",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <h1>
                  Patrimônio Total
                </h1>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Patrimônio Total",
                },
                "ref": null,
                "rendered": Array [
                  "Patrimônio Total",
                ],
                "type": "h1",
              },
              Object {
                "instance": <br />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "br",
              },
              Object {
                "instance": <div
                  class="ui  one column centered grid"
                >
                  <div
                    class="ui statistics"
                  >
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      >
                        10000
                      </div>
                      <div
                        class="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      class="statistic"
                    >
                      <div
                        class="value"
                      />
                      <div
                        class="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="ui statistics"
                  >
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      >
                        10000
                      </div>
                      <div
                        className="label"
                      >
                         R$ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         ฿ 
                      </div>
                    </div>
                    <div
                      className="statistic"
                    >
                      <div
                        className="value"
                      />
                      <div
                        className="label"
                      >
                         $ 
                      </div>
                    </div>
                  </div>,
                  "className": "ui  one column centered grid",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <div
                      class="ui statistics"
                    >
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        >
                          10000
                        </div>
                        <div
                          class="label"
                        >
                           R$ 
                        </div>
                      </div>
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           ฿ 
                        </div>
                      </div>
                      <div
                        class="statistic"
                      >
                        <div
                          class="value"
                        />
                        <div
                          class="label"
                        >
                           $ 
                        </div>
                      </div>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          >
                            10000
                          </div>
                          <div
                            className="label"
                          >
                             R$ 
                          </div>
                        </div>,
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             ฿ 
                          </div>
                        </div>,
                        <div
                          className="statistic"
                        >
                          <div
                            className="value"
                          />
                          <div
                            className="label"
                          >
                             $ 
                          </div>
                        </div>,
                      ],
                      "className": "ui statistics",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          >
                            10000
                          </div>
                          <div
                            class="label"
                          >
                             R$ 
                          </div>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <div
                              className="value"
                            >
                              10000
                            </div>,
                            <div
                              className="label"
                            >
                               R$ 
                            </div>,
                          ],
                          "className": "statistic",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <div
                              class="value"
                            >
                              10000
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": 10000,
                              "className": "value",
                            },
                            "ref": null,
                            "rendered": Array [
                              10000,
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="label"
                            >
                               R$ 
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": " R$ ",
                              "className": "label",
                            },
                            "ref": null,
                            "rendered": Array [
                              " R$ ",
                            ],
                            "type": "div",
                          },
                        ],
                        "type": "div",
                      },
                      Object {
                        "instance": <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             ฿ 
                          </div>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <div
                              className="value"
                            />,
                            <div
                              className="label"
                            >
                               ฿ 
                            </div>,
                          ],
                          "className": "statistic",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <div
                              class="value"
                            />,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": undefined,
                              "className": "value",
                            },
                            "ref": null,
                            "rendered": Array [
                              undefined,
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="label"
                            >
                               ฿ 
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": " ฿ ",
                              "className": "label",
                            },
                            "ref": null,
                            "rendered": Array [
                              " ฿ ",
                            ],
                            "type": "div",
                          },
                        ],
                        "type": "div",
                      },
                      Object {
                        "instance": <div
                          class="statistic"
                        >
                          <div
                            class="value"
                          />
                          <div
                            class="label"
                          >
                             $ 
                          </div>
                        </div>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <div
                              className="value"
                            />,
                            <div
                              className="label"
                            >
                               $ 
                            </div>,
                          ],
                          "className": "statistic",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <div
                              class="value"
                            />,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": undefined,
                              "className": "value",
                            },
                            "ref": null,
                            "rendered": Array [
                              undefined,
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="label"
                            >
                               $ 
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": " $ ",
                              "className": "label",
                            },
                            "ref": null,
                            "rendered": Array [
                              " $ ",
                            ],
                            "type": "div",
                          },
                        ],
                        "type": "div",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <br />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "br",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
